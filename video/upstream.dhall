{- Generated by ds-to-dhall DO NOT EDIT -}

{ Base.Service.backend
  =
  { apiVersion = "v1"
  , kind = "Service"
  , metadata =
    { annotations = Some
        ( toMap
            { description =
                "Dummy service that prevents backend pods from being scheduled on the same node if possible."
            }
        )
    , clusterName = None Text
    , creationTimestamp = None Text
    , deletionGracePeriodSeconds = None Natural
    , deletionTimestamp = None Text
    , finalizers = None (List Text)
    , generateName = None Text
    , generation = None Natural
    , labels = Some
        ( toMap
            { group = "backend"
            , sourcegraph-resource-requires = "no-cluster-admin"
            , deploy = "sourcegraph"
            }
        )
    , managedFields =
        None
          ( List
              { apiVersion : Text
              , fieldsType : Optional Text
              , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
              , manager : Optional Text
              , operation : Optional Text
              , time : Optional Text
              }
          )
    , name = Some "backend"
    , namespace = None Text
    , ownerReferences =
        None
          ( List
              { apiVersion : Text
              , blockOwnerDeletion : Optional Bool
              , controller : Optional Bool
              , kind : Text
              , name : Text
              , uid : Text
              }
          )
    , resourceVersion = None Text
    , selfLink = None Text
    , uid = None Text
    }
  , spec = Some
    { clusterIP = Some "None"
    , externalIPs = None (List Text)
    , externalName = None Text
    , externalTrafficPolicy = None Text
    , healthCheckNodePort = None Natural
    , ipFamily = None Text
    , loadBalancerIP = None Text
    , loadBalancerSourceRanges = None (List Text)
    , ports = Some
      [ { appProtocol = None Text
        , name = Some "unused"
        , nodePort = None Natural
        , port = 10811
        , protocol = None Text
        , targetPort = Some (< Int : Natural | String : Text >.Int 10811)
        }
      ]
    , publishNotReadyAddresses = None Bool
    , selector = Some (toMap { group = "backend" })
    , sessionAffinity = None Text
    , sessionAffinityConfig =
        None { clientIP : Optional { timeoutSeconds : Optional Natural } }
    , topologyKeys = None (List Text)
    , type = Some "ClusterIP"
    }
  , status =
      None
        { loadBalancer :
            Optional
              { ingress :
                  Optional
                    (List { hostname : Optional Text, ip : Optional Text })
              }
        }
  }
, Cadvisor =
  { ClusterRole.cadvisor
    =
    { aggregationRule =
        None
          { clusterRoleSelectors :
              Optional
                ( List
                    { matchExpressions :
                        Optional
                          ( List
                              { key : Text
                              , operator : Text
                              , values : Optional (List Text)
                              }
                          )
                    , matchLabels :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
                )
          }
    , apiVersion = "rbac.authorization.k8s.io/v1"
    , kind = "ClusterRole"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , app = "cadvisor"
              , `app.kubernetes.io/component` = "cadvisor"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "cadvisor"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , rules = Some
      [ { apiGroups = Some [ "policy" ]
        , nonResourceURLs = None (List Text)
        , resourceNames = Some [ "cadvisor" ]
        , resources = Some [ "podsecuritypolicies" ]
        , verbs = [ "use" ]
        }
      ]
    }
  , ClusterRoleBinding.cadvisor
    =
    { apiVersion = "rbac.authorization.k8s.io/v1"
    , kind = "ClusterRoleBinding"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , app = "cadvisor"
              , `app.kubernetes.io/component` = "cadvisor"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "cadvisor"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , roleRef =
      { apiGroup = "rbac.authorization.k8s.io"
      , kind = "ClusterRole"
      , name = "cadvisor"
      }
    , subjects = Some
      [ { apiGroup = None Text
        , kind = "ServiceAccount"
        , name = "cadvisor"
        , namespace = Some "default"
        }
      ]
    }
  , DaemonSet.cadvisor
    =
    { apiVersion = "apps/v1"
    , kind = "DaemonSet"
    , metadata =
      { annotations = Some
          ( toMap
              { `seccomp.security.alpha.kubernetes.io/pod` = "docker/default"
              , description =
                  "DaemonSet to ensure all nodes run a cAdvisor pod."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , `app.kubernetes.io/component` = "cadvisor"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "cadvisor"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = None Natural
      , revisionHistoryLimit = None Natural
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "cadvisor" })
        }
      , template =
        { metadata =
          { annotations = Some
              ( toMap
                  { `sourcegraph.prometheus/scrape` = "true"
                  , `prometheus.io/port` = "48080"
                  , description = "Collects and exports container metrics."
                  }
              )
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some (toMap { app = "cadvisor", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = Some False
          , containers =
            [ { args = Some
                [ "--store_container_labels=false"
                , "--whitelisted_container_labels=io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid"
                ]
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/cadvisor:insiders@sha256:fc44bfeb8ac74e8476082cce046a023a6c321348aeb83049328a96c90eda70fb"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "cadvisor"
              , ports = Some
                [ { containerPort = 48080
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = Some "TCP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "2000Mi", cpu = "300m" })
                , requests = Some (toMap { memory = "200Mi", cpu = "150m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/rootfs"
                  , mountPropagation = None Text
                  , name = "rootfs"
                  , readOnly = Some True
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/var/run"
                  , mountPropagation = None Text
                  , name = "var-run"
                  , readOnly = Some True
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/sys"
                  , mountPropagation = None Text
                  , name = "sys"
                  , readOnly = Some True
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/var/lib/docker"
                  , mountPropagation = None Text
                  , name = "docker"
                  , readOnly = Some True
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/dev/disk"
                  , mountPropagation = None Text
                  , name = "disk"
                  , readOnly = Some True
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext =
              None
                { fsGroup : Optional Natural
                , fsGroupChangePolicy : Optional Text
                , runAsGroup : Optional Natural
                , runAsNonRoot : Optional Bool
                , runAsUser : Optional Natural
                , seLinuxOptions :
                    Optional
                      { level : Optional Text
                      , role : Optional Text
                      , type : Optional Text
                      , user : Optional Text
                      }
                , supplementalGroups : Optional (List Natural)
                , sysctls : Optional (List { name : Text, value : Text })
                , windowsOptions :
                    Optional
                      { gmsaCredentialSpec : Optional Text
                      , gmsaCredentialSpecName : Optional Text
                      , runAsUserName : Optional Text
                      }
                }
          , serviceAccount = None Text
          , serviceAccountName = Some "cadvisor"
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = Some 30
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = Some { path = "/", type = None Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "rootfs"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = Some { path = "/var/run", type = None Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "var-run"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = Some { path = "/sys", type = None Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "sys"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = Some { path = "/var/lib/docker", type = None Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "docker"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = Some { path = "/dev/disk", type = None Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "disk"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      , updateStrategy =
          None
            { rollingUpdate :
                Optional
                  { maxUnavailable : Optional < Int : Natural | String : Text >
                  }
            , type : Optional Text
            }
      }
    , status =
        None
          { collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , currentNumberScheduled : Natural
          , desiredNumberScheduled : Natural
          , numberAvailable : Optional Natural
          , numberMisscheduled : Natural
          , numberReady : Natural
          , numberUnavailable : Optional Natural
          , observedGeneration : Optional Natural
          , updatedNumberScheduled : Optional Natural
          }
    }
  , PodSecurityPolicy.cadvisor
    =
    { apiVersion = "policy/v1beta1"
    , kind = "PodSecurityPolicy"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , app = "cadvisor"
              , `app.kubernetes.io/component` = "cadvisor"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "cadvisor"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { allowPrivilegeEscalation = None Bool
      , allowedCSIDrivers = None (List { name : Text })
      , allowedCapabilities = None (List Text)
      , allowedFlexVolumes = None (List { driver : Text })
      , allowedHostPaths = Some
        [ { pathPrefix = Some "/", readOnly = None Bool }
        , { pathPrefix = Some "/var/run", readOnly = None Bool }
        , { pathPrefix = Some "/sys", readOnly = None Bool }
        , { pathPrefix = Some "/var/lib/docker", readOnly = None Bool }
        , { pathPrefix = Some "/dev/disk", readOnly = None Bool }
        ]
      , allowedProcMountTypes = None (List Text)
      , allowedUnsafeSysctls = None (List Text)
      , defaultAddCapabilities = None (List Text)
      , defaultAllowPrivilegeEscalation = None Bool
      , forbiddenSysctls = None (List Text)
      , fsGroup =
        { ranges = None (List { max : Natural, min : Natural })
        , rule = Some "RunAsAny"
        }
      , hostIPC = None Bool
      , hostNetwork = None Bool
      , hostPID = None Bool
      , hostPorts = None (List { max : Natural, min : Natural })
      , privileged = None Bool
      , readOnlyRootFilesystem = None Bool
      , requiredDropCapabilities = None (List Text)
      , runAsGroup =
          None
            { ranges : Optional (List { max : Natural, min : Natural })
            , rule : Text
            }
      , runAsUser =
        { ranges = None (List { max : Natural, min : Natural })
        , rule = "RunAsAny"
        }
      , runtimeClass =
          None
            { allowedRuntimeClassNames : List Text
            , defaultRuntimeClassName : Optional Text
            }
      , seLinux =
        { rule = "RunAsAny"
        , seLinuxOptions =
            None
              { level : Optional Text
              , role : Optional Text
              , type : Optional Text
              , user : Optional Text
              }
        }
      , supplementalGroups =
        { ranges = None (List { max : Natural, min : Natural })
        , rule = Some "RunAsAny"
        }
      , volumes = Some [ "*" ]
      }
    }
  , ServiceAccount.cadvisor
    =
    { apiVersion = "v1"
    , automountServiceAccountToken = None Bool
    , imagePullSecrets = None (List { name : Optional Text })
    , kind = "ServiceAccount"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , app = "cadvisor"
              , `app.kubernetes.io/component` = "cadvisor"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "cadvisor"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , secrets =
        None
          ( List
              { apiVersion : Text
              , fieldPath : Optional Text
              , kind : Text
              , name : Optional Text
              , namespace : Optional Text
              , resourceVersion : Optional Text
              , uid : Optional Text
              }
          )
    }
  }
, Codeintel-Db =
  { ConfigMap.codeintel-db-conf
    =
    { apiVersion = "v1"
    , binaryData = None (List { mapKey : Text, mapValue : Text })
    , data = Some
        ( toMap
            { `postgresql.conf` =
                ''
                # -----------------------------
                # PostgreSQL configuration file
                # -----------------------------
                #
                # This file consists of lines of the form:
                #
                #   name = value
                #
                # (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
                # "#" anywhere on a line.  The complete list of parameter names and allowed
                # values can be found in the PostgreSQL documentation.
                #
                # The commented-out settings shown in this file represent the default values.
                # Re-commenting a setting is NOT sufficient to revert it to the default value;
                # you need to reload the server.
                #
                # This file is read on server startup and when the server receives a SIGHUP
                # signal.  If you edit the file on a running system, you have to SIGHUP the
                # server for the changes to take effect, run "pg_ctl reload", or execute
                # "SELECT pg_reload_conf()".  Some parameters, which are marked below,
                # require a server shutdown and restart to take effect.
                #
                # Any parameter can also be given as a command-line option to the server, e.g.,
                # "postgres -c log_connections=on".  Some parameters can be changed at run time
                # with the "SET" SQL command.
                #
                # Memory units:  kB = kilobytes        Time units:  ms  = milliseconds
                #                MB = megabytes                     s   = seconds
                #                GB = gigabytes                     min = minutes
                #                TB = terabytes                     h   = hours
                #                                                   d   = days


                #------------------------------------------------------------------------------
                # FILE LOCATIONS
                #------------------------------------------------------------------------------

                # The default values of these variables are driven from the -D command-line
                # option or PGDATA environment variable, represented here as ConfigDir.

                #data_directory = 'ConfigDir'		# use data in another directory
                					# (change requires restart)
                #hba_file = 'ConfigDir/pg_hba.conf'	# host-based authentication file
                					# (change requires restart)
                #ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
                					# (change requires restart)

                # If external_pid_file is not explicitly set, no extra PID file is written.
                #external_pid_file = '''			# write an extra PID file
                					# (change requires restart)


                #------------------------------------------------------------------------------
                # CONNECTIONS AND AUTHENTICATION
                #------------------------------------------------------------------------------

                # - Connection Settings -

                listen_addresses = '*'
                					# comma-separated list of addresses;
                					# defaults to 'localhost'; use '*' for all
                					# (change requires restart)
                #port = 5432				# (change requires restart)
                max_connections = 100			# (change requires restart)
                #superuser_reserved_connections = 3	# (change requires restart)
                #unix_socket_directories = '/var/run/postgresql'	# comma-separated list of directories
                					# (change requires restart)
                #unix_socket_group = '''			# (change requires restart)
                #unix_socket_permissions = 0777		# begin with 0 to use octal notation
                					# (change requires restart)
                #bonjour = off				# advertise server via Bonjour
                					# (change requires restart)
                #bonjour_name = '''			# defaults to the computer name
                					# (change requires restart)

                # - TCP Keepalives -
                # see "man 7 tcp" for details

                #tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
                					# 0 selects the system default
                #tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
                					# 0 selects the system default
                #tcp_keepalives_count = 0		# TCP_KEEPCNT;
                					# 0 selects the system default

                # - Authentication -

                #authentication_timeout = 1min		# 1s-600s
                #password_encryption = md5		# md5 or scram-sha-256
                #db_user_namespace = off

                # GSSAPI using Kerberos
                #krb_server_keyfile = '''
                #krb_caseins_users = off

                # - SSL -

                #ssl = off
                #ssl_ca_file = '''
                #ssl_cert_file = 'server.crt'
                #ssl_crl_file = '''
                #ssl_key_file = 'server.key'
                #ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers
                #ssl_prefer_server_ciphers = on
                #ssl_ecdh_curve = 'prime256v1'
                #ssl_dh_params_file = '''
                #ssl_passphrase_command = '''
                #ssl_passphrase_command_supports_reload = off


                #------------------------------------------------------------------------------
                # RESOURCE USAGE (except WAL)
                #------------------------------------------------------------------------------

                # - Memory -

                shared_buffers = 128MB			# min 128kB
                					# (change requires restart)
                #huge_pages = try			# on, off, or try
                					# (change requires restart)
                #temp_buffers = 8MB			# min 800kB
                #max_prepared_transactions = 0		# zero disables the feature
                					# (change requires restart)
                # Caution: it is not advisable to set max_prepared_transactions nonzero unless
                # you actively intend to use prepared transactions.
                #work_mem = 4MB				# min 64kB
                #maintenance_work_mem = 64MB		# min 1MB
                #autovacuum_work_mem = -1		# min 1MB, or -1 to use maintenance_work_mem
                #max_stack_depth = 2MB			# min 100kB
                dynamic_shared_memory_type = posix	# the default is the first option
                					# supported by the operating system:
                					#   posix
                					#   sysv
                					#   windows
                					#   mmap
                					# use none to disable dynamic shared memory
                					# (change requires restart)

                # - Disk -

                #temp_file_limit = -1			# limits per-process temp file space
                					# in kB, or -1 for no limit

                # - Kernel Resources -

                #max_files_per_process = 1000		# min 25
                					# (change requires restart)

                # - Cost-Based Vacuum Delay -

                #vacuum_cost_delay = 0			# 0-100 milliseconds
                #vacuum_cost_page_hit = 1		# 0-10000 credits
                #vacuum_cost_page_miss = 10		# 0-10000 credits
                #vacuum_cost_page_dirty = 20		# 0-10000 credits
                #vacuum_cost_limit = 200		# 1-10000 credits

                # - Background Writer -

                #bgwriter_delay = 200ms			# 10-10000ms between rounds
                #bgwriter_lru_maxpages = 100		# max buffers written/round, 0 disables
                #bgwriter_lru_multiplier = 2.0		# 0-10.0 multiplier on buffers scanned/round
                #bgwriter_flush_after = 512kB		# measured in pages, 0 disables

                # - Asynchronous Behavior -

                #effective_io_concurrency = 1		# 1-1000; 0 disables prefetching
                #max_worker_processes = 8		# (change requires restart)
                #max_parallel_maintenance_workers = 2	# taken from max_parallel_workers
                #max_parallel_workers_per_gather = 2	# taken from max_parallel_workers
                #parallel_leader_participation = on
                #max_parallel_workers = 8		# maximum number of max_worker_processes that
                					# can be used in parallel operations
                #old_snapshot_threshold = -1		# 1min-60d; -1 disables; 0 is immediate
                					# (change requires restart)
                #backend_flush_after = 0		# measured in pages, 0 disables


                #------------------------------------------------------------------------------
                # WRITE-AHEAD LOG
                #------------------------------------------------------------------------------

                # - Settings -

                #wal_level = replica			# minimal, replica, or logical
                					# (change requires restart)
                #fsync = on				# flush data to disk for crash safety
                					# (turning this off can cause
                					# unrecoverable data corruption)
                #synchronous_commit = on		# synchronization level;
                					# off, local, remote_write, remote_apply, or on
                #wal_sync_method = fsync		# the default is the first option
                					# supported by the operating system:
                					#   open_datasync
                					#   fdatasync (default on Linux)
                					#   fsync
                					#   fsync_writethrough
                					#   open_sync
                #full_page_writes = on			# recover from partial page writes
                #wal_compression = off			# enable compression of full-page writes
                #wal_log_hints = off			# also do full page writes of non-critical updates
                					# (change requires restart)
                #wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
                					# (change requires restart)
                #wal_writer_delay = 200ms		# 1-10000 milliseconds
                #wal_writer_flush_after = 1MB		# measured in pages, 0 disables

                #commit_delay = 0			# range 0-100000, in microseconds
                #commit_siblings = 5			# range 1-1000

                # - Checkpoints -

                #checkpoint_timeout = 5min		# range 30s-1d
                max_wal_size = 1GB
                min_wal_size = 80MB
                #checkpoint_completion_target = 0.5	# checkpoint target duration, 0.0 - 1.0
                #checkpoint_flush_after = 256kB		# measured in pages, 0 disables
                #checkpoint_warning = 30s		# 0 disables

                # - Archiving -

                #archive_mode = off		# enables archiving; off, on, or always
                				# (change requires restart)
                #archive_command = '''		# command to use to archive a logfile segment
                				# placeholders: %p = path of file to archive
                				#               %f = file name only
                				# e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
                #archive_timeout = 0		# force a logfile segment switch after this
                				# number of seconds; 0 disables


                #------------------------------------------------------------------------------
                # REPLICATION
                #------------------------------------------------------------------------------

                # - Sending Servers -

                # Set these on the master and on any standby that will send replication data.

                #max_wal_senders = 10		# max number of walsender processes
                				# (change requires restart)
                #wal_keep_segments = 0		# in logfile segments; 0 disables
                #wal_sender_timeout = 60s	# in milliseconds; 0 disables

                #max_replication_slots = 10	# max number of replication slots
                				# (change requires restart)
                #track_commit_timestamp = off	# collect timestamp of transaction commit
                				# (change requires restart)

                # - Master Server -

                # These settings are ignored on a standby server.

                #synchronous_standby_names = '''	# standby servers that provide sync rep
                				# method to choose sync standbys, number of sync standbys,
                				# and comma-separated list of application_name
                				# from standby(s); '*' = all
                #vacuum_defer_cleanup_age = 0	# number of xacts by which cleanup is delayed

                # - Standby Servers -

                # These settings are ignored on a master server.

                #hot_standby = on			# "off" disallows queries during recovery
                					# (change requires restart)
                #max_standby_archive_delay = 30s	# max delay before canceling queries
                					# when reading WAL from archive;
                					# -1 allows indefinite delay
                #max_standby_streaming_delay = 30s	# max delay before canceling queries
                					# when reading streaming WAL;
                					# -1 allows indefinite delay
                #wal_receiver_status_interval = 10s	# send replies at least this often
                					# 0 disables
                #hot_standby_feedback = off		# send info from standby to prevent
                					# query conflicts
                #wal_receiver_timeout = 60s		# time that receiver waits for
                					# communication from master
                					# in milliseconds; 0 disables
                #wal_retrieve_retry_interval = 5s	# time to wait before retrying to
                					# retrieve WAL after a failed attempt

                # - Subscribers -

                # These settings are ignored on a publisher.

                #max_logical_replication_workers = 4	# taken from max_worker_processes
                					# (change requires restart)
                #max_sync_workers_per_subscription = 2	# taken from max_logical_replication_workers


                #------------------------------------------------------------------------------
                # QUERY TUNING
                #------------------------------------------------------------------------------

                # - Planner Method Configuration -

                #enable_bitmapscan = on
                #enable_hashagg = on
                #enable_hashjoin = on
                #enable_indexscan = on
                #enable_indexonlyscan = on
                #enable_material = on
                #enable_mergejoin = on
                #enable_nestloop = on
                #enable_parallel_append = on
                #enable_seqscan = on
                #enable_sort = on
                #enable_tidscan = on
                #enable_partitionwise_join = off
                #enable_partitionwise_aggregate = off
                #enable_parallel_hash = on
                #enable_partition_pruning = on

                # - Planner Cost Constants -

                #seq_page_cost = 1.0			# measured on an arbitrary scale
                #random_page_cost = 4.0			# same scale as above
                #cpu_tuple_cost = 0.01			# same scale as above
                #cpu_index_tuple_cost = 0.005		# same scale as above
                #cpu_operator_cost = 0.0025		# same scale as above
                #parallel_tuple_cost = 0.1		# same scale as above
                #parallel_setup_cost = 1000.0	# same scale as above

                #jit_above_cost = 100000		# perform JIT compilation if available
                					# and query more expensive than this;
                					# -1 disables
                #jit_inline_above_cost = 500000		# inline small functions if query is
                					# more expensive than this; -1 disables
                #jit_optimize_above_cost = 500000	# use expensive JIT optimizations if
                					# query is more expensive than this;
                					# -1 disables

                #min_parallel_table_scan_size = 8MB
                #min_parallel_index_scan_size = 512kB
                #effective_cache_size = 4GB

                # - Genetic Query Optimizer -

                #geqo = on
                #geqo_threshold = 12
                #geqo_effort = 5			# range 1-10
                #geqo_pool_size = 0			# selects default based on effort
                #geqo_generations = 0			# selects default based on effort
                #geqo_selection_bias = 2.0		# range 1.5-2.0
                #geqo_seed = 0.0			# range 0.0-1.0

                # - Other Planner Options -

                #default_statistics_target = 100	# range 1-10000
                #constraint_exclusion = partition	# on, off, or partition
                #cursor_tuple_fraction = 0.1		# range 0.0-1.0
                #from_collapse_limit = 8
                #join_collapse_limit = 8		# 1 disables collapsing of explicit
                					# JOIN clauses
                #force_parallel_mode = off
                #jit = off				# allow JIT compilation


                #------------------------------------------------------------------------------
                # REPORTING AND LOGGING
                #------------------------------------------------------------------------------

                # - Where to Log -

                #log_destination = 'stderr'		# Valid values are combinations of
                					# stderr, csvlog, syslog, and eventlog,
                					# depending on platform.  csvlog
                					# requires logging_collector to be on.

                # This is used when logging to stderr:
                #logging_collector = off		# Enable capturing of stderr and csvlog
                					# into log files. Required to be on for
                					# csvlogs.
                					# (change requires restart)

                # These are only used if logging_collector is on:
                #log_directory = 'log'			# directory where log files are written,
                					# can be absolute or relative to PGDATA
                #log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'	# log file name pattern,
                					# can include strftime() escapes
                #log_file_mode = 0600			# creation mode for log files,
                					# begin with 0 to use octal notation
                #log_truncate_on_rotation = off		# If on, an existing log file with the
                					# same name as the new log file will be
                					# truncated rather than appended to.
                					# But such truncation only occurs on
                					# time-driven rotation, not on restarts
                					# or size-driven rotation.  Default is
                					# off, meaning append to existing files
                					# in all cases.
                #log_rotation_age = 1d			# Automatic rotation of logfiles will
                					# happen after that time.  0 disables.
                #log_rotation_size = 10MB		# Automatic rotation of logfiles will
                					# happen after that much log output.
                					# 0 disables.

                # These are relevant when logging to syslog:
                #syslog_facility = 'LOCAL0'
                #syslog_ident = 'postgres'
                #syslog_sequence_numbers = on
                #syslog_split_messages = on

                # This is only relevant when logging to eventlog (win32):
                # (change requires restart)
                #event_source = 'PostgreSQL'

                # - When to Log -

                #log_min_messages = warning		# values in order of decreasing detail:
                					#   debug5
                					#   debug4
                					#   debug3
                					#   debug2
                					#   debug1
                					#   info
                					#   notice
                					#   warning
                					#   error
                					#   log
                					#   fatal
                					#   panic

                #log_min_error_statement = error	# values in order of decreasing detail:
                					#   debug5
                					#   debug4
                					#   debug3
                					#   debug2
                					#   debug1
                					#   info
                					#   notice
                					#   warning
                					#   error
                					#   log
                					#   fatal
                					#   panic (effectively off)

                #log_min_duration_statement = -1	# -1 is disabled, 0 logs all statements
                					# and their durations, > 0 logs only
                					# statements running at least this number
                					# of milliseconds


                # - What to Log -

                #debug_print_parse = off
                #debug_print_rewritten = off
                #debug_print_plan = off
                #debug_pretty_print = on
                #log_checkpoints = off
                #log_connections = off
                #log_disconnections = off
                #log_duration = off
                #log_error_verbosity = default		# terse, default, or verbose messages
                #log_hostname = off
                #log_line_prefix = '%m [%p] '		# special values:
                					#   %a = application name
                					#   %u = user name
                					#   %d = database name
                					#   %r = remote host and port
                					#   %h = remote host
                					#   %p = process ID
                					#   %t = timestamp without milliseconds
                					#   %m = timestamp with milliseconds
                					#   %n = timestamp with milliseconds (as a Unix epoch)
                					#   %i = command tag
                					#   %e = SQL state
                					#   %c = session ID
                					#   %l = session line number
                					#   %s = session start timestamp
                					#   %v = virtual transaction ID
                					#   %x = transaction ID (0 if none)
                					#   %q = stop here in non-session
                					#        processes
                					#   %% = '%'
                					# e.g. '<%u%%%d> '
                #log_lock_waits = off			# log lock waits >= deadlock_timeout
                #log_statement = 'none'			# none, ddl, mod, all
                #log_replication_commands = off
                #log_temp_files = -1			# log temporary files equal or larger
                					# than the specified size in kilobytes;
                					# -1 disables, 0 logs all temp files
                log_timezone = 'Etc/UTC'

                #------------------------------------------------------------------------------
                # PROCESS TITLE
                #------------------------------------------------------------------------------

                #cluster_name = '''			# added to process titles if nonempty
                					# (change requires restart)
                #update_process_title = on


                #------------------------------------------------------------------------------
                # STATISTICS
                #------------------------------------------------------------------------------

                # - Query and Index Statistics Collector -

                #track_activities = on
                #track_counts = on
                #track_io_timing = off
                #track_functions = none			# none, pl, all
                #track_activity_query_size = 1024	# (change requires restart)
                #stats_temp_directory = 'pg_stat_tmp'


                # - Monitoring -

                #log_parser_stats = off
                #log_planner_stats = off
                #log_executor_stats = off
                #log_statement_stats = off


                #------------------------------------------------------------------------------
                # AUTOVACUUM
                #------------------------------------------------------------------------------

                #autovacuum = on			# Enable autovacuum subprocess?  'on'
                					# requires track_counts to also be on.
                #log_autovacuum_min_duration = -1	# -1 disables, 0 logs all actions and
                					# their durations, > 0 logs only
                					# actions running at least this number
                					# of milliseconds.
                #autovacuum_max_workers = 3		# max number of autovacuum subprocesses
                					# (change requires restart)
                #autovacuum_naptime = 1min		# time between autovacuum runs
                #autovacuum_vacuum_threshold = 50	# min number of row updates before
                					# vacuum
                #autovacuum_analyze_threshold = 50	# min number of row updates before
                					# analyze
                #autovacuum_vacuum_scale_factor = 0.2	# fraction of table size before vacuum
                #autovacuum_analyze_scale_factor = 0.1	# fraction of table size before analyze
                #autovacuum_freeze_max_age = 200000000	# maximum XID age before forced vacuum
                					# (change requires restart)
                #autovacuum_multixact_freeze_max_age = 400000000	# maximum multixact age
                					# before forced vacuum
                					# (change requires restart)
                #autovacuum_vacuum_cost_delay = 20ms	# default vacuum cost delay for
                					# autovacuum, in milliseconds;
                					# -1 means use vacuum_cost_delay
                #autovacuum_vacuum_cost_limit = -1	# default vacuum cost limit for
                					# autovacuum, -1 means use
                					# vacuum_cost_limit


                #------------------------------------------------------------------------------
                # CLIENT CONNECTION DEFAULTS
                #------------------------------------------------------------------------------

                # - Statement Behavior -

                #client_min_messages = notice		# values in order of decreasing detail:
                					#   debug5
                					#   debug4
                					#   debug3
                					#   debug2
                					#   debug1
                					#   log
                					#   notice
                					#   warning
                					#   error
                #search_path = '"$user", public'	# schema names
                #row_security = on
                #default_tablespace = '''		# a tablespace name, ''' uses the default
                #temp_tablespaces = '''			# a list of tablespace names, ''' uses
                					# only default tablespace
                #check_function_bodies = on
                #default_transaction_isolation = 'read committed'
                #default_transaction_read_only = off
                #default_transaction_deferrable = off
                #session_replication_role = 'origin'
                #statement_timeout = 0			# in milliseconds, 0 is disabled
                #lock_timeout = 0			# in milliseconds, 0 is disabled
                #idle_in_transaction_session_timeout = 0	# in milliseconds, 0 is disabled
                #vacuum_freeze_min_age = 50000000
                #vacuum_freeze_table_age = 150000000
                #vacuum_multixact_freeze_min_age = 5000000
                #vacuum_multixact_freeze_table_age = 150000000
                #vacuum_cleanup_index_scale_factor = 0.1	# fraction of total number of tuples
                						# before index cleanup, 0 always performs
                						# index cleanup
                #bytea_output = 'hex'			# hex, escape
                #xmlbinary = 'base64'
                #xmloption = 'content'
                #gin_fuzzy_search_limit = 0
                #gin_pending_list_limit = 4MB

                # - Locale and Formatting -

                datestyle = 'iso, mdy'
                #intervalstyle = 'postgres'
                timezone = 'Etc/UTC'
                #timezone_abbreviations = 'Default'     # Select the set of available time zone
                					# abbreviations.  Currently, there are
                					#   Default
                					#   Australia (historical usage)
                					#   India
                					# You can create your own file in
                					# share/timezonesets/.
                #extra_float_digits = 0			# min -15, max 3
                #client_encoding = sql_ascii		# actually, defaults to database
                					# encoding

                # These settings are initialized by initdb, but they can be changed.
                lc_messages = 'en_US.utf8'			# locale for system error message
                					# strings
                lc_monetary = 'en_US.utf8'			# locale for monetary formatting
                lc_numeric = 'en_US.utf8'			# locale for number formatting
                lc_time = 'en_US.utf8'				# locale for time formatting

                # default configuration for text search
                default_text_search_config = 'pg_catalog.english'

                # - Shared Library Preloading -

                #shared_preload_libraries = '''	# (change requires restart)
                #local_preload_libraries = '''
                #session_preload_libraries = '''
                #jit_provider = 'llvmjit'		# JIT library to use

                # - Other Defaults -

                #dynamic_library_path = '$libdir'


                #------------------------------------------------------------------------------
                # LOCK MANAGEMENT
                #------------------------------------------------------------------------------

                #deadlock_timeout = 1s
                #max_locks_per_transaction = 64		# min 10
                					# (change requires restart)
                #max_pred_locks_per_transaction = 64	# min 10
                					# (change requires restart)
                #max_pred_locks_per_relation = -2	# negative values mean
                					# (max_pred_locks_per_transaction
                					#  / -max_pred_locks_per_relation) - 1
                #max_pred_locks_per_page = 2            # min 0


                #------------------------------------------------------------------------------
                # VERSION AND PLATFORM COMPATIBILITY
                #------------------------------------------------------------------------------

                # - Previous PostgreSQL Versions -

                #array_nulls = on
                #backslash_quote = safe_encoding	# on, off, or safe_encoding
                #default_with_oids = off
                #escape_string_warning = on
                #lo_compat_privileges = off
                #operator_precedence_warning = off
                #quote_all_identifiers = off
                #standard_conforming_strings = on
                #synchronize_seqscans = on

                # - Other Platforms and Clients -

                #transform_null_equals = off


                #------------------------------------------------------------------------------
                # ERROR HANDLING
                #------------------------------------------------------------------------------

                #exit_on_error = off			# terminate session on any error?
                #restart_after_crash = on		# reinitialize after backend crash?
                #data_sync_retry = off			# retry or panic on failure to fsync
                					# data?
                					# (change requires restart)


                #------------------------------------------------------------------------------
                # CONFIG FILE INCLUDES
                #------------------------------------------------------------------------------

                # These options allow settings to be loaded from files other than the
                # default postgresql.conf.

                #include_dir = '''			# include files ending in '.conf' from
                					# a directory, e.g., 'conf.d'
                #include_if_exists = '''			# include file only if it exists
                #include = '''				# include file


                #------------------------------------------------------------------------------
                # CUSTOMIZED OPTIONS
                #------------------------------------------------------------------------------

                # Add settings for extensions here
                ''
            }
        )
    , immutable = None Bool
    , kind = "ConfigMap"
    , metadata =
      { annotations = Some
          (toMap { description = "Configuration for PostgreSQL" })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "codeintel-db-conf"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    }
  , Deployment.codeintel-db
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          (toMap { description = "Postgres database for various data." })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "codeintel-db"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "codeintel-db" })
        }
      , strategy = Some
        { rollingUpdate =
            None
              { maxSurge : Optional < Int : Natural | String : Text >
              , maxUnavailable : Optional < Int : Natural | String : Text >
              }
        , type = Some "Recreate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              ( toMap
                  { group = "backend"
                  , app = "codeintel-db"
                  , deploy = "sourcegraph"
                  }
              )
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/codeintel-db@sha256:63090799b34b3115a387d96fe2227a37999d432b774a1d9b7966b8c5d81b56ad"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = Some { command = Some [ "/liveness.sh" ] }
                , failureThreshold = None Natural
                , httpGet =
                    None
                      { host : Optional Text
                      , httpHeaders :
                          Optional (List { name : Text, value : Text })
                      , path : Optional Text
                      , port : < Int : Natural | String : Text >
                      , scheme : Optional Text
                      }
                , initialDelaySeconds = Some 15
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = None Natural
                }
              , name = "pgsql"
              , ports = Some
                [ { containerPort = 5432
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "pgsql"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = Some { command = Some [ "/ready.sh" ] }
                , failureThreshold = None Natural
                , httpGet =
                    None
                      { host : Optional Text
                      , httpHeaders :
                          Optional (List { name : Text, value : Text })
                      , path : Optional Text
                      , port : < Int : Natural | String : Text >
                      , scheme : Optional Text
                      }
                , initialDelaySeconds = None Natural
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = None Natural
                }
              , resources = Some
                { limits = Some (toMap { memory = "2Gi", cpu = "4" })
                , requests = Some (toMap { memory = "2Gi", cpu = "4" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data"
                  , mountPropagation = None Text
                  , name = "disk"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/conf"
                  , mountPropagation = None Text
                  , name = "pgsql-conf"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = None (List Text)
              , command = None (List Text)
              , env = Some
                [ { name = "DATA_SOURCE_NAME"
                  , value = Some
                      "postgres://sg:@localhost:5432/?sslmode=disable"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "wrouesnel/postgres_exporter:v0.7.0@sha256:785c919627c06f540d515aac88b7966f352403f73e931e70dc2cbf783146a98b"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "pgsql-exporter"
              , ports =
                  None
                    ( List
                        { containerPort : Natural
                        , hostIP : Optional Text
                        , hostPort : Optional Natural
                        , name : Optional Text
                        , protocol : Optional Text
                        }
                    )
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "50Mi", cpu = "10m" })
                , requests = Some (toMap { memory = "50Mi", cpu = "10m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers = Some
            [ { args = None (List Text)
              , command = Some
                [ "sh"
                , "-c"
                , "if [ -d /data/pgdata-11 ]; then chmod 750 /data/pgdata-11; fi"
                ]
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "sourcegraph/alpine:3.10@sha256:4d05cd5669726fc38823e92320659a6d1ef7879e62268adec5df658a0bacf65c"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "correct-data-dir-permissions"
              , ports =
                  None
                    ( List
                        { containerPort : Natural
                        , hostIP : Optional Text
                        , hostPort : Optional Natural
                        , name : Optional Text
                        , protocol : Optional Text
                        }
                    )
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources =
                  None
                    { limits :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , requests :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , securityContext = Some
                { allowPrivilegeEscalation = None Bool
                , capabilities =
                    None
                      { add : Optional (List Text)
                      , drop : Optional (List Text)
                      }
                , privileged = None Bool
                , procMount = None Text
                , readOnlyRootFilesystem = None Bool
                , runAsGroup = None Natural
                , runAsNonRoot = None Bool
                , runAsUser = Some 0
                , seLinuxOptions =
                    None
                      { level : Optional Text
                      , role : Optional Text
                      , type : Optional Text
                      , user : Optional Text
                      }
                , windowsOptions =
                    None
                      { gmsaCredentialSpec : Optional Text
                      , gmsaCredentialSpecName : Optional Text
                      , runAsUserName : Optional Text
                      }
                }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data"
                  , mountPropagation = None Text
                  , name = "disk"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            ]
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "disk"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim = Some
                { claimName = "codeintel-db", readOnly = None Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap = Some
                { defaultMode = Some 511
                , items =
                    None
                      ( List
                          { key : Text, mode : Optional Natural, path : Text }
                      )
                , name = Some "codeintel-db-conf"
                , optional = None Bool
                }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "pgsql-conf"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , PersistentVolumeClaim.codeintel-db
    =
    { apiVersion = "v1"
    , kind = "PersistentVolumeClaim"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "codeintel-db"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { accessModes = Some [ "ReadWriteOnce" ]
      , dataSource = None { apiGroup : Optional Text, kind : Text, name : Text }
      , resources = Some
        { limits = None (List { mapKey : Text, mapValue : Text })
        , requests = Some (toMap { storage = "200Gi" })
        }
      , selector =
          None
            { matchExpressions :
                Optional
                  ( List
                      { key : Text
                      , operator : Text
                      , values : Optional (List Text)
                      }
                  )
            , matchLabels : Optional (List { mapKey : Text, mapValue : Text })
            }
      , storageClassName = Some "sourcegraph"
      , volumeMode = None Text
      , volumeName = None Text
      }
    , status =
        None
          { accessModes : Optional (List Text)
          , capacity : Optional (List { mapKey : Text, mapValue : Text })
          , conditions :
              Optional
                ( List
                    { lastProbeTime : Optional Text
                    , lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , phase : Optional Text
          }
    }
  , Service.codeintel-db
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "9187"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "codeintel-db"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "codeintel-db"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "pgsql"
          , nodePort = None Natural
          , port = 5432
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "pgsql")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "codeintel-db" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Frontend =
  { Deployment.sourcegraph-frontend
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          ( toMap
              { description = "Serves the frontend of Sourcegraph via HTTP(S)."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "frontend"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "sourcegraph-frontend"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 2
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "sourcegraph-frontend" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 2)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 0)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              (toMap { app = "sourcegraph-frontend", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = Some [ "serve" ]
              , command = None (List Text)
              , env = Some
                [ { name = "PGDATABASE"
                  , value = Some "sg"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "PGHOST"
                  , value = Some "pgsql"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "PGPORT"
                  , value = Some "5432"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "PGSSLMODE"
                  , value = Some "disable"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "PGUSER"
                  , value = Some "sg"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "CODEINTEL_PGDATABASE"
                  , value = Some "sg"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "CODEINTEL_PGHOST"
                  , value = Some "codeintel-db"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "CODEINTEL_PGPORT"
                  , value = Some "5432"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "CODEINTEL_PGSSLMODE"
                  , value = Some "disable"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "CODEINTEL_PGUSER"
                  , value = Some "sg"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "SRC_GIT_SERVERS"
                  , value = Some "gitserver-0.gitserver:3178"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = None Text, fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                , { name = "CACHE_DIR"
                  , value = Some "/mnt/cache/\$(POD_NAME)"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "GRAFANA_SERVER_URL"
                  , value = Some "http://grafana:30070"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "JAEGER_SERVER_URL"
                  , value = Some "http://jaeger-query:16686"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "PRECISE_CODE_INTEL_BUNDLE_MANAGER_URL"
                  , value = Some "http://precise-code-intel-bundle-manager:3187"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "PROMETHEUS_URL"
                  , value = Some "http://prometheus:30090"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/frontend:insiders@sha256:834e9a0420c4490775bccb45a2e1e28b27dee9314eca56f8e605f84ff82b2cd9"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = Some 300
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , name = "frontend"
              , ports = Some
                [ { containerPort = 3080
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                , { containerPort = 3090
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http-internal"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = None Natural
                , periodSeconds = Some 5
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , resources = Some
                { limits = Some (toMap { memory = "4G", cpu = "2" })
                , requests = Some (toMap { memory = "2G", cpu = "2" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/mnt/cache"
                  , mountPropagation = None Text
                  , name = "cache-ssd"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = Some "sourcegraph-frontend"
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir = Some { medium = None Text, sizeLimit = None Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "cache-ssd"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Ingress.sourcegraph-frontend
    =
    { apiVersion = "networking.k8s.io/v1beta1"
    , kind = "Ingress"
    , metadata =
      { annotations = Some
          ( toMap
              { `kubernetes.io/ingress.class` = "nginx"
              , `nginx.ingress.kubernetes.io/proxy-body-size` = "150m"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "sourcegraph-frontend"
              , `app.kubernetes.io/component` = "frontend"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "sourcegraph-frontend"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { backend =
          None
            { resource :
                Optional { apiGroup : Optional Text, kind : Text, name : Text }
            , serviceName : Optional Text
            , servicePort : Optional < Int : Natural | String : Text >
            }
      , ingressClassName = None Text
      , rules = Some
        [ { host = None Text
          , http = Some
            { paths =
              [ { backend =
                  { resource =
                      None
                        { apiGroup : Optional Text, kind : Text, name : Text }
                  , serviceName = Some "sourcegraph-frontend"
                  , servicePort = Some
                      (< Int : Natural | String : Text >.Int 30080)
                  }
                , path = Some "/"
                , pathType = None Text
                }
              ]
            }
          }
        ]
      , tls =
          None
            (List { hosts : Optional (List Text), secretName : Optional Text })
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  , Role.sourcegraph-frontend
    =
    { apiVersion = "rbac.authorization.k8s.io/v1"
    , kind = "Role"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "frontend"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "sourcegraph-frontend"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , rules = Some
      [ { apiGroups = Some [ "" ]
        , nonResourceURLs = None (List Text)
        , resourceNames = None (List Text)
        , resources = Some [ "endpoints", "services" ]
        , verbs = [ "get", "list", "watch" ]
        }
      ]
    }
  , RoleBinding.sourcegraph-frontend
    =
    { apiVersion = "rbac.authorization.k8s.io/v1"
    , kind = "RoleBinding"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "frontend"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "sourcegraph-frontend"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , roleRef =
      { apiGroup = "rbac.authorization.k8s.io"
      , kind = "Role"
      , name = "sourcegraph-frontend"
      }
    , subjects = Some
      [ { apiGroup = None Text
        , kind = "ServiceAccount"
        , name = "sourcegraph-frontend"
        , namespace = None Text
        }
      ]
    }
  , Service =
    { sourcegraph-frontend =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "6060"
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "sourcegraph-frontend"
                , `app.kubernetes.io/component` = "frontend"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "sourcegraph-frontend"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "http"
            , nodePort = None Natural
            , port = 30080
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "http")
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "sourcegraph-frontend" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    , sourcegraph-frontend-internal =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = None (List { mapKey : Text, mapValue : Text })
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "sourcegraph-frontend"
                , `app.kubernetes.io/component` = "frontend"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "sourcegraph-frontend-internal"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "http-internal"
            , nodePort = None Natural
            , port = 80
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "http-internal")
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "sourcegraph-frontend" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    }
  , ServiceAccount.sourcegraph-frontend
    =
    { apiVersion = "v1"
    , automountServiceAccountToken = None Bool
    , imagePullSecrets = Some [ { name = Some "docker-registry" } ]
    , kind = "ServiceAccount"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "frontend"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "sourcegraph-frontend"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , secrets =
        None
          ( List
              { apiVersion : Text
              , fieldPath : Optional Text
              , kind : Text
              , name : Optional Text
              , namespace : Optional Text
              , resourceVersion : Optional Text
              , uid : Optional Text
              }
          )
    }
  }
, Github-Proxy =
  { Deployment.github-proxy
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          (toMap { description = "Rate-limiting proxy for the GitHub API." })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "github-proxy"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "github-proxy"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "github-proxy" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 0)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              (toMap { app = "github-proxy", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/github-proxy:insiders@sha256:a810d5dc7ab026af65ab2d971856bf288495abd8045556900fc5f92ce497e0e8"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "github-proxy"
              , ports = Some
                [ { containerPort = 3180
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "1G", cpu = "1" })
                , requests = Some (toMap { memory = "250M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes =
              None
                ( List
                    { awsElasticBlockStore :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , azureDisk :
                        Optional
                          { cachingMode : Optional Text
                          , diskName : Text
                          , diskURI : Text
                          , fsType : Optional Text
                          , kind : Text
                          , readOnly : Optional Bool
                          }
                    , azureFile :
                        Optional
                          { readOnly : Optional Bool
                          , secretName : Text
                          , shareName : Text
                          }
                    , cephfs :
                        Optional
                          { monitors : List Text
                          , path : Optional Text
                          , readOnly : Optional Bool
                          , secretFile : Optional Text
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , cinder :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeID : Text
                          }
                    , configMap :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , csi :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , nodePublishSecretRef :
                              Optional { name : Optional Text }
                          , readOnly : Optional Bool
                          , volumeAttributes :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , downwardAPI :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , mode : Optional Natural
                                    , path : Text
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    }
                                )
                          }
                    , emptyDir :
                        Optional
                          { medium : Optional Text, sizeLimit : Optional Text }
                    , fc :
                        Optional
                          { fsType : Optional Text
                          , lun : Optional Natural
                          , readOnly : Optional Bool
                          , targetWWNs : Optional (List Text)
                          , wwids : Optional (List Text)
                          }
                    , flexVolume :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , options :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          }
                    , flocker :
                        Optional
                          { datasetName : Optional Text
                          , datasetUUID : Optional Text
                          }
                    , gcePersistentDisk :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , pdName : Text
                          , readOnly : Optional Bool
                          }
                    , gitRepo :
                        Optional
                          { directory : Optional Text
                          , repository : Text
                          , revision : Optional Text
                          }
                    , glusterfs :
                        Optional
                          { endpoints : Text
                          , path : Text
                          , readOnly : Optional Bool
                          }
                    , hostPath : Optional { path : Text, type : Optional Text }
                    , iscsi :
                        Optional
                          { chapAuthDiscovery : Optional Bool
                          , chapAuthSession : Optional Bool
                          , fsType : Optional Text
                          , initiatorName : Optional Text
                          , iqn : Text
                          , iscsiInterface : Optional Text
                          , lun : Natural
                          , portals : Optional (List Text)
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , targetPortal : Text
                          }
                    , name : Text
                    , nfs :
                        Optional
                          { path : Text
                          , readOnly : Optional Bool
                          , server : Text
                          }
                    , persistentVolumeClaim :
                        Optional { claimName : Text, readOnly : Optional Bool }
                    , photonPersistentDisk :
                        Optional { fsType : Optional Text, pdID : Text }
                    , portworxVolume :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , projected :
                        Optional
                          { defaultMode : Optional Natural
                          , sources :
                              List
                                { configMap :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , downwardAPI :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { fieldRef :
                                                    Optional
                                                      { apiVersion :
                                                          Optional Text
                                                      , fieldPath : Text
                                                      }
                                                , mode : Optional Natural
                                                , path : Text
                                                , resourceFieldRef :
                                                    Optional
                                                      { containerName :
                                                          Optional Text
                                                      , divisor : Optional Text
                                                      , resource : Text
                                                      }
                                                }
                                            )
                                      }
                                , secret :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , serviceAccountToken :
                                    Optional
                                      { audience : Optional Text
                                      , expirationSeconds : Optional Natural
                                      , path : Text
                                      }
                                }
                          }
                    , quobyte :
                        Optional
                          { group : Optional Text
                          , readOnly : Optional Bool
                          , registry : Text
                          , tenant : Optional Text
                          , user : Optional Text
                          , volume : Text
                          }
                    , rbd :
                        Optional
                          { fsType : Optional Text
                          , image : Text
                          , keyring : Optional Text
                          , monitors : List Text
                          , pool : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , scaleIO :
                        Optional
                          { fsType : Optional Text
                          , gateway : Text
                          , protectionDomain : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : { name : Optional Text }
                          , sslEnabled : Optional Bool
                          , storageMode : Optional Text
                          , storagePool : Optional Text
                          , system : Text
                          , volumeName : Optional Text
                          }
                    , secret :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , optional : Optional Bool
                          , secretName : Optional Text
                          }
                    , storageos :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeName : Optional Text
                          , volumeNamespace : Optional Text
                          }
                    , vsphereVolume :
                        Optional
                          { fsType : Optional Text
                          , storagePolicyID : Optional Text
                          , storagePolicyName : Optional Text
                          , volumePath : Text
                          }
                    }
                )
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service.github-proxy
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "6060"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "github-proxy"
              , `app.kubernetes.io/component` = "github-proxy"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "github-proxy"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 80
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "github-proxy" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Gitserver =
  { Service.gitserver
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "6060"
              , description =
                  "Headless service that provides a stable network identity for the gitserver stateful set."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "gitserver"
              , `app.kubernetes.io/component` = "gitserver"
              , type = "gitserver"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "gitserver"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = Some "None"
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "unused"
          , nodePort = None Natural
          , port = 10811
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.Int 10811)
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "gitserver", type = "gitserver" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  , StatefulSet.gitserver
    =
    { apiVersion = "apps/v1"
    , kind = "StatefulSet"
    , metadata =
      { annotations = Some
          ( toMap
              { description =
                  "Stores clones of repositories to perform Git operations."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "gitserver"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "gitserver"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { podManagementPolicy = None Text
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "gitserver" })
        }
      , serviceName = "gitserver"
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              ( toMap
                  { group = "backend"
                  , app = "gitserver"
                  , type = "gitserver"
                  , deploy = "sourcegraph"
                  }
              )
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = Some [ "run" ]
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/gitserver:insiders@sha256:a6fdd7d889a2e4a76f22cfa4fe8fd4775895b8213329ca5ef2c2bf0515cb1a51"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet =
                    None
                      { host : Optional Text
                      , httpHeaders :
                          Optional (List { name : Text, value : Text })
                      , path : Optional Text
                      , port : < Int : Natural | String : Text >
                      , scheme : Optional Text
                      }
                , initialDelaySeconds = Some 5
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket = Some
                  { host = None Text
                  , port = < Int : Natural | String : Text >.String "rpc"
                  }
                , timeoutSeconds = Some 5
                }
              , name = "gitserver"
              , ports = Some
                [ { containerPort = 3178
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "rpc"
                  , protocol = None Text
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "8G", cpu = "8" })
                , requests = Some (toMap { memory = "8G", cpu = "4" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data/repos"
                  , mountPropagation = None Text
                  , name = "repos"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "repos"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      , updateStrategy = Some
        { rollingUpdate = None { partition : Optional Natural }
        , type = Some "RollingUpdate"
        }
      , volumeClaimTemplates = Some
        [ { apiVersion = "apps/v1"
          , kind = "PersistentVolumeClaim"
          , metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = None (List { mapKey : Text, mapValue : Text })
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = Some "repos"
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { accessModes = Some [ "ReadWriteOnce" ]
            , dataSource =
                None { apiGroup : Optional Text, kind : Text, name : Text }
            , resources = Some
              { limits = None (List { mapKey : Text, mapValue : Text })
              , requests = Some (toMap { storage = "400Gi" })
              }
            , selector =
                None
                  { matchExpressions :
                      Optional
                        ( List
                            { key : Text
                            , operator : Text
                            , values : Optional (List Text)
                            }
                        )
                  , matchLabels :
                      Optional (List { mapKey : Text, mapValue : Text })
                  }
            , storageClassName = Some "sourcegraph"
            , volumeMode = None Text
            , volumeName = None Text
            }
          , status =
              None
                { accessModes : Optional (List Text)
                , capacity : Optional (List { mapKey : Text, mapValue : Text })
                , conditions :
                    Optional
                      ( List
                          { lastProbeTime : Optional Text
                          , lastTransitionTime : Optional Text
                          , message : Optional Text
                          , reason : Optional Text
                          , status : Text
                          , type : Text
                          }
                      )
                , phase : Optional Text
                }
          }
        ]
      }
    , status =
        None
          { collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , currentReplicas : Optional Natural
          , currentRevision : Optional Text
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Natural
          , updateRevision : Optional Text
          , updatedReplicas : Optional Natural
          }
    }
  }
, Grafana =
  { ConfigMap.grafana
    =
    { apiVersion = "v1"
    , binaryData = None (List { mapKey : Text, mapValue : Text })
    , data = Some
        ( toMap
            { `datasources.yml` =
                ''
                apiVersion: 1

                datasources:
                  - name: Prometheus
                    type: prometheus
                    access: proxy
                    url: http://prometheus:30090
                    isDefault: true
                    editable: false
                  - name: Jaeger
                    type: Jaeger
                    access: proxy
                    url: http://jaeger-query:16686/-/debug/jaeger
                ''
            }
        )
    , immutable = None Bool
    , kind = "ConfigMap"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "grafana"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "grafana"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    }
  , Service.grafana
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "grafana"
              , `app.kubernetes.io/component` = "grafana"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "grafana"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 30070
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "grafana" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  , ServiceAccount.grafana
    =
    { apiVersion = "v1"
    , automountServiceAccountToken = None Bool
    , imagePullSecrets = Some [ { name = Some "docker-registry" } ]
    , kind = "ServiceAccount"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "grafana"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "grafana"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , secrets =
        None
          ( List
              { apiVersion : Text
              , fieldPath : Optional Text
              , kind : Text
              , name : Optional Text
              , namespace : Optional Text
              , resourceVersion : Optional Text
              , uid : Optional Text
              }
          )
    }
  , StatefulSet.grafana
    =
    { apiVersion = "apps/v1"
    , kind = "StatefulSet"
    , metadata =
      { annotations = Some
          (toMap { description = "Metrics/monitoring dashboards and alerts." })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "grafana"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "grafana"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { podManagementPolicy = None Text
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "grafana" })
        }
      , serviceName = "grafana"
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some (toMap { app = "grafana", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/grafana:insiders@sha256:6cde769ff3d80fdd34666d6cc785445cb4779369d4037590fda7c4eed4ddcca5"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "grafana"
              , ports = Some
                [ { containerPort = 3370
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "512Mi", cpu = "1" })
                , requests = Some (toMap { memory = "512Mi", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/var/lib/grafana"
                  , mountPropagation = None Text
                  , name = "grafana-data"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/sg_config_grafana/provisioning/datasources"
                  , mountPropagation = None Text
                  , name = "config"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = Some "grafana"
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap = Some
                { defaultMode = Some 511
                , items =
                    None
                      ( List
                          { key : Text, mode : Optional Natural, path : Text }
                      )
                , name = Some "grafana"
                , optional = None Bool
                }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "config"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      , updateStrategy = Some
        { rollingUpdate = None { partition : Optional Natural }
        , type = Some "RollingUpdate"
        }
      , volumeClaimTemplates = Some
        [ { apiVersion = "apps/v1"
          , kind = "PersistentVolumeClaim"
          , metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = None (List { mapKey : Text, mapValue : Text })
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = Some "grafana-data"
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { accessModes = Some [ "ReadWriteOnce" ]
            , dataSource =
                None { apiGroup : Optional Text, kind : Text, name : Text }
            , resources = Some
              { limits = None (List { mapKey : Text, mapValue : Text })
              , requests = Some (toMap { storage = "2Gi" })
              }
            , selector =
                None
                  { matchExpressions :
                      Optional
                        ( List
                            { key : Text
                            , operator : Text
                            , values : Optional (List Text)
                            }
                        )
                  , matchLabels :
                      Optional (List { mapKey : Text, mapValue : Text })
                  }
            , storageClassName = Some "sourcegraph"
            , volumeMode = None Text
            , volumeName = None Text
            }
          , status =
              None
                { accessModes : Optional (List Text)
                , capacity : Optional (List { mapKey : Text, mapValue : Text })
                , conditions :
                    Optional
                      ( List
                          { lastProbeTime : Optional Text
                          , lastTransitionTime : Optional Text
                          , message : Optional Text
                          , reason : Optional Text
                          , status : Text
                          , type : Text
                          }
                      )
                , phase : Optional Text
                }
          }
        ]
      }
    , status =
        None
          { collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , currentReplicas : Optional Natural
          , currentRevision : Optional Text
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Natural
          , updateRevision : Optional Text
          , updatedReplicas : Optional Natural
          }
    }
  }
, Indexed-Search =
  { Service =
    { indexed-search =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "6070"
                , description =
                    "Headless service that provides a stable network identity for the indexed-search stateful set."
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "indexed-search"
                , `app.kubernetes.io/component` = "indexed-search"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "indexed-search"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = Some "None"
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = None Text
            , nodePort = None Natural
            , port = 6070
            , protocol = None Text
            , targetPort = None < Int : Natural | String : Text >
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "indexed-search" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    , indexed-search-indexer =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "6072"
                , description =
                    "Headless service that provides a stable network identity for the indexed-search stateful set."
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "indexed-search-indexer"
                , `app.kubernetes.io/component` = "indexed-search"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "indexed-search-indexer"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = Some "None"
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = None Text
            , nodePort = None Natural
            , port = 6072
            , protocol = None Text
            , targetPort = Some (< Int : Natural | String : Text >.Int 6072)
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "indexed-search" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    }
  , StatefulSet.indexed-search
    =
    { apiVersion = "apps/v1"
    , kind = "StatefulSet"
    , metadata =
      { annotations = Some
          ( toMap
              { description = "Backend for indexed text search operations." }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "indexed-search"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "indexed-search"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { podManagementPolicy = None Text
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "indexed-search" })
        }
      , serviceName = "indexed-search"
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              (toMap { app = "indexed-search", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/indexed-searcher:insiders@sha256:fcf03182a79aaf48252f74e47204088a2db4f11620c97dfbca0721f61521fe3c"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "zoekt-webserver"
              , ports = Some
                [ { containerPort = 6070
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = Some 3
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = None Natural
                , periodSeconds = Some 5
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , resources = Some
                { limits = Some (toMap { memory = "4G", cpu = "2" })
                , requests = Some (toMap { memory = "2G", cpu = "500m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data"
                  , mountPropagation = None Text
                  , name = "data"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/search-indexer:insiders@sha256:315e2f1994d80cf0cdbc3c9d46a568f406b3a08ce4f6dd372a4225bcfebc4f2f"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "zoekt-indexserver"
              , ports = Some
                [ { containerPort = 6072
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "index-http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "8G", cpu = "8" })
                , requests = Some (toMap { memory = "4G", cpu = "4" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data"
                  , mountPropagation = None Text
                  , name = "data"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "data"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      , updateStrategy = Some
        { rollingUpdate = None { partition : Optional Natural }
        , type = Some "RollingUpdate"
        }
      , volumeClaimTemplates = Some
        [ { apiVersion = "apps/v1"
          , kind = "PersistentVolumeClaim"
          , metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = Some (toMap { deploy = "sourcegraph" })
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = Some "data"
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { accessModes = Some [ "ReadWriteOnce" ]
            , dataSource =
                None { apiGroup : Optional Text, kind : Text, name : Text }
            , resources = Some
              { limits = None (List { mapKey : Text, mapValue : Text })
              , requests = Some (toMap { storage = "200Gi" })
              }
            , selector =
                None
                  { matchExpressions :
                      Optional
                        ( List
                            { key : Text
                            , operator : Text
                            , values : Optional (List Text)
                            }
                        )
                  , matchLabels :
                      Optional (List { mapKey : Text, mapValue : Text })
                  }
            , storageClassName = Some "sourcegraph"
            , volumeMode = None Text
            , volumeName = None Text
            }
          , status =
              None
                { accessModes : Optional (List Text)
                , capacity : Optional (List { mapKey : Text, mapValue : Text })
                , conditions :
                    Optional
                      ( List
                          { lastProbeTime : Optional Text
                          , lastTransitionTime : Optional Text
                          , message : Optional Text
                          , reason : Optional Text
                          , status : Text
                          , type : Text
                          }
                      )
                , phase : Optional Text
                }
          }
        ]
      }
    , status =
        None
          { collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , currentReplicas : Optional Natural
          , currentRevision : Optional Text
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Natural
          , updateRevision : Optional Text
          , updatedReplicas : Optional Natural
          }
    }
  }
, Jaeger =
  { Deployment.jaeger
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { `app.kubernetes.io/name` = "jaeger"
              , sourcegraph-resource-requires = "no-cluster-admin"
              , app = "jaeger"
              , `app.kubernetes.io/component` = "jaeger"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "jaeger"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = None Natural
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = None Natural
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some
            ( toMap
                { `app.kubernetes.io/name` = "jaeger"
                , app = "jaeger"
                , `app.kubernetes.io/component` = "all-in-one"
                }
            )
        }
      , strategy = Some
        { rollingUpdate =
            None
              { maxSurge : Optional < Int : Natural | String : Text >
              , maxUnavailable : Optional < Int : Natural | String : Text >
              }
        , type = Some "Recreate"
        }
      , template =
        { metadata =
          { annotations = Some
              ( toMap
                  { `prometheus.io/port` = "16686"
                  , `prometheus.io/scrape` = "true"
                  }
              )
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              ( toMap
                  { `app.kubernetes.io/name` = "jaeger"
                  , app = "jaeger"
                  , `app.kubernetes.io/component` = "all-in-one"
                  , deploy = "sourcegraph"
                  }
              )
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = Some [ "--memory.max-traces=20000" ]
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-all-in-one:insiders@sha256:b723668550f539dc211cd6e1943edb0a0871af4f58e55e9b0ec7523109322e3d"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 16686
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 14250
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/"
                  , port = < Int : Natural | String : Text >.Int 14269
                  , scheme = None Text
                  }
                , initialDelaySeconds = Some 5
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = None Natural
                }
              , resources = Some
                { limits = Some (toMap { memory = "1G", cpu = "1" })
                , requests = Some (toMap { memory = "500M", cpu = "500m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes =
              None
                ( List
                    { awsElasticBlockStore :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , azureDisk :
                        Optional
                          { cachingMode : Optional Text
                          , diskName : Text
                          , diskURI : Text
                          , fsType : Optional Text
                          , kind : Text
                          , readOnly : Optional Bool
                          }
                    , azureFile :
                        Optional
                          { readOnly : Optional Bool
                          , secretName : Text
                          , shareName : Text
                          }
                    , cephfs :
                        Optional
                          { monitors : List Text
                          , path : Optional Text
                          , readOnly : Optional Bool
                          , secretFile : Optional Text
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , cinder :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeID : Text
                          }
                    , configMap :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , csi :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , nodePublishSecretRef :
                              Optional { name : Optional Text }
                          , readOnly : Optional Bool
                          , volumeAttributes :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , downwardAPI :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , mode : Optional Natural
                                    , path : Text
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    }
                                )
                          }
                    , emptyDir :
                        Optional
                          { medium : Optional Text, sizeLimit : Optional Text }
                    , fc :
                        Optional
                          { fsType : Optional Text
                          , lun : Optional Natural
                          , readOnly : Optional Bool
                          , targetWWNs : Optional (List Text)
                          , wwids : Optional (List Text)
                          }
                    , flexVolume :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , options :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          }
                    , flocker :
                        Optional
                          { datasetName : Optional Text
                          , datasetUUID : Optional Text
                          }
                    , gcePersistentDisk :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , pdName : Text
                          , readOnly : Optional Bool
                          }
                    , gitRepo :
                        Optional
                          { directory : Optional Text
                          , repository : Text
                          , revision : Optional Text
                          }
                    , glusterfs :
                        Optional
                          { endpoints : Text
                          , path : Text
                          , readOnly : Optional Bool
                          }
                    , hostPath : Optional { path : Text, type : Optional Text }
                    , iscsi :
                        Optional
                          { chapAuthDiscovery : Optional Bool
                          , chapAuthSession : Optional Bool
                          , fsType : Optional Text
                          , initiatorName : Optional Text
                          , iqn : Text
                          , iscsiInterface : Optional Text
                          , lun : Natural
                          , portals : Optional (List Text)
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , targetPortal : Text
                          }
                    , name : Text
                    , nfs :
                        Optional
                          { path : Text
                          , readOnly : Optional Bool
                          , server : Text
                          }
                    , persistentVolumeClaim :
                        Optional { claimName : Text, readOnly : Optional Bool }
                    , photonPersistentDisk :
                        Optional { fsType : Optional Text, pdID : Text }
                    , portworxVolume :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , projected :
                        Optional
                          { defaultMode : Optional Natural
                          , sources :
                              List
                                { configMap :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , downwardAPI :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { fieldRef :
                                                    Optional
                                                      { apiVersion :
                                                          Optional Text
                                                      , fieldPath : Text
                                                      }
                                                , mode : Optional Natural
                                                , path : Text
                                                , resourceFieldRef :
                                                    Optional
                                                      { containerName :
                                                          Optional Text
                                                      , divisor : Optional Text
                                                      , resource : Text
                                                      }
                                                }
                                            )
                                      }
                                , secret :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , serviceAccountToken :
                                    Optional
                                      { audience : Optional Text
                                      , expirationSeconds : Optional Natural
                                      , path : Text
                                      }
                                }
                          }
                    , quobyte :
                        Optional
                          { group : Optional Text
                          , readOnly : Optional Bool
                          , registry : Text
                          , tenant : Optional Text
                          , user : Optional Text
                          , volume : Text
                          }
                    , rbd :
                        Optional
                          { fsType : Optional Text
                          , image : Text
                          , keyring : Optional Text
                          , monitors : List Text
                          , pool : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , scaleIO :
                        Optional
                          { fsType : Optional Text
                          , gateway : Text
                          , protectionDomain : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : { name : Optional Text }
                          , sslEnabled : Optional Bool
                          , storageMode : Optional Text
                          , storagePool : Optional Text
                          , system : Text
                          , volumeName : Optional Text
                          }
                    , secret :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , optional : Optional Bool
                          , secretName : Optional Text
                          }
                    , storageos :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeName : Optional Text
                          , volumeNamespace : Optional Text
                          }
                    , vsphereVolume :
                        Optional
                          { fsType : Optional Text
                          , storagePolicyID : Optional Text
                          , storagePolicyName : Optional Text
                          , volumePath : Text
                          }
                    }
                )
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service =
    { jaeger-collector =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = None (List { mapKey : Text, mapValue : Text })
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { `app.kubernetes.io/name` = "jaeger"
                , sourcegraph-resource-requires = "no-cluster-admin"
                , app = "jaeger"
                , `app.kubernetes.io/component` = "jaeger"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "jaeger-collector"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "jaeger-collector-tchannel"
            , nodePort = None Natural
            , port = 14267
            , protocol = Some "TCP"
            , targetPort = Some (< Int : Natural | String : Text >.Int 14267)
            }
          , { appProtocol = None Text
            , name = Some "jaeger-collector-http"
            , nodePort = None Natural
            , port = 14268
            , protocol = Some "TCP"
            , targetPort = Some (< Int : Natural | String : Text >.Int 14268)
            }
          , { appProtocol = None Text
            , name = Some "jaeger-collector-grpc"
            , nodePort = None Natural
            , port = 14250
            , protocol = Some "TCP"
            , targetPort = Some (< Int : Natural | String : Text >.Int 14250)
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some
            ( toMap
                { `app.kubernetes.io/name` = "jaeger"
                , `app.kubernetes.io/component` = "all-in-one"
                }
            )
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    , jaeger-query =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = None (List { mapKey : Text, mapValue : Text })
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { `app.kubernetes.io/name` = "jaeger"
                , sourcegraph-resource-requires = "no-cluster-admin"
                , app = "jaeger"
                , `app.kubernetes.io/component` = "jaeger"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "jaeger-query"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "query-http"
            , nodePort = None Natural
            , port = 16686
            , protocol = Some "TCP"
            , targetPort = Some (< Int : Natural | String : Text >.Int 16686)
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some
            ( toMap
                { `app.kubernetes.io/name` = "jaeger"
                , `app.kubernetes.io/component` = "all-in-one"
                }
            )
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    }
  }
, Pgsql =
  { ConfigMap.pgsql-conf
    =
    { apiVersion = "v1"
    , binaryData = None (List { mapKey : Text, mapValue : Text })
    , data = Some
        ( toMap
            { `postgresql.conf` =
                ''
                # -----------------------------
                # PostgreSQL configuration file
                # -----------------------------
                #
                # This file consists of lines of the form:
                #
                #   name = value
                #
                # (The "=" is optional.)  Whitespace may be used.  Comments are introduced with
                # "#" anywhere on a line.  The complete list of parameter names and allowed
                # values can be found in the PostgreSQL documentation.
                #
                # The commented-out settings shown in this file represent the default values.
                # Re-commenting a setting is NOT sufficient to revert it to the default value;
                # you need to reload the server.
                #
                # This file is read on server startup and when the server receives a SIGHUP
                # signal.  If you edit the file on a running system, you have to SIGHUP the
                # server for the changes to take effect, run "pg_ctl reload", or execute
                # "SELECT pg_reload_conf()".  Some parameters, which are marked below,
                # require a server shutdown and restart to take effect.
                #
                # Any parameter can also be given as a command-line option to the server, e.g.,
                # "postgres -c log_connections=on".  Some parameters can be changed at run time
                # with the "SET" SQL command.
                #
                # Memory units:  kB = kilobytes        Time units:  ms  = milliseconds
                #                MB = megabytes                     s   = seconds
                #                GB = gigabytes                     min = minutes
                #                TB = terabytes                     h   = hours
                #                                                   d   = days


                #------------------------------------------------------------------------------
                # FILE LOCATIONS
                #------------------------------------------------------------------------------

                # The default values of these variables are driven from the -D command-line
                # option or PGDATA environment variable, represented here as ConfigDir.

                #data_directory = 'ConfigDir'		# use data in another directory
                					# (change requires restart)
                #hba_file = 'ConfigDir/pg_hba.conf'	# host-based authentication file
                					# (change requires restart)
                #ident_file = 'ConfigDir/pg_ident.conf'	# ident configuration file
                					# (change requires restart)

                # If external_pid_file is not explicitly set, no extra PID file is written.
                #external_pid_file = '''			# write an extra PID file
                					# (change requires restart)


                #------------------------------------------------------------------------------
                # CONNECTIONS AND AUTHENTICATION
                #------------------------------------------------------------------------------

                # - Connection Settings -

                listen_addresses = '*'
                					# comma-separated list of addresses;
                					# defaults to 'localhost'; use '*' for all
                					# (change requires restart)
                #port = 5432				# (change requires restart)
                max_connections = 100			# (change requires restart)
                #superuser_reserved_connections = 3	# (change requires restart)
                #unix_socket_directories = '/var/run/postgresql'	# comma-separated list of directories
                					# (change requires restart)
                #unix_socket_group = '''			# (change requires restart)
                #unix_socket_permissions = 0777		# begin with 0 to use octal notation
                					# (change requires restart)
                #bonjour = off				# advertise server via Bonjour
                					# (change requires restart)
                #bonjour_name = '''			# defaults to the computer name
                					# (change requires restart)

                # - TCP Keepalives -
                # see "man 7 tcp" for details

                #tcp_keepalives_idle = 0		# TCP_KEEPIDLE, in seconds;
                					# 0 selects the system default
                #tcp_keepalives_interval = 0		# TCP_KEEPINTVL, in seconds;
                					# 0 selects the system default
                #tcp_keepalives_count = 0		# TCP_KEEPCNT;
                					# 0 selects the system default

                # - Authentication -

                #authentication_timeout = 1min		# 1s-600s
                #password_encryption = md5		# md5 or scram-sha-256
                #db_user_namespace = off

                # GSSAPI using Kerberos
                #krb_server_keyfile = '''
                #krb_caseins_users = off

                # - SSL -

                #ssl = off
                #ssl_ca_file = '''
                #ssl_cert_file = 'server.crt'
                #ssl_crl_file = '''
                #ssl_key_file = 'server.key'
                #ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL' # allowed SSL ciphers
                #ssl_prefer_server_ciphers = on
                #ssl_ecdh_curve = 'prime256v1'
                #ssl_dh_params_file = '''
                #ssl_passphrase_command = '''
                #ssl_passphrase_command_supports_reload = off


                #------------------------------------------------------------------------------
                # RESOURCE USAGE (except WAL)
                #------------------------------------------------------------------------------

                # - Memory -

                shared_buffers = 128MB			# min 128kB
                					# (change requires restart)
                #huge_pages = try			# on, off, or try
                					# (change requires restart)
                #temp_buffers = 8MB			# min 800kB
                #max_prepared_transactions = 0		# zero disables the feature
                					# (change requires restart)
                # Caution: it is not advisable to set max_prepared_transactions nonzero unless
                # you actively intend to use prepared transactions.
                #work_mem = 4MB				# min 64kB
                #maintenance_work_mem = 64MB		# min 1MB
                #autovacuum_work_mem = -1		# min 1MB, or -1 to use maintenance_work_mem
                #max_stack_depth = 2MB			# min 100kB
                dynamic_shared_memory_type = posix	# the default is the first option
                					# supported by the operating system:
                					#   posix
                					#   sysv
                					#   windows
                					#   mmap
                					# use none to disable dynamic shared memory
                					# (change requires restart)

                # - Disk -

                #temp_file_limit = -1			# limits per-process temp file space
                					# in kB, or -1 for no limit

                # - Kernel Resources -

                #max_files_per_process = 1000		# min 25
                					# (change requires restart)

                # - Cost-Based Vacuum Delay -

                #vacuum_cost_delay = 0			# 0-100 milliseconds
                #vacuum_cost_page_hit = 1		# 0-10000 credits
                #vacuum_cost_page_miss = 10		# 0-10000 credits
                #vacuum_cost_page_dirty = 20		# 0-10000 credits
                #vacuum_cost_limit = 200		# 1-10000 credits

                # - Background Writer -

                #bgwriter_delay = 200ms			# 10-10000ms between rounds
                #bgwriter_lru_maxpages = 100		# max buffers written/round, 0 disables
                #bgwriter_lru_multiplier = 2.0		# 0-10.0 multiplier on buffers scanned/round
                #bgwriter_flush_after = 512kB		# measured in pages, 0 disables

                # - Asynchronous Behavior -

                #effective_io_concurrency = 1		# 1-1000; 0 disables prefetching
                #max_worker_processes = 8		# (change requires restart)
                #max_parallel_maintenance_workers = 2	# taken from max_parallel_workers
                #max_parallel_workers_per_gather = 2	# taken from max_parallel_workers
                #parallel_leader_participation = on
                #max_parallel_workers = 8		# maximum number of max_worker_processes that
                					# can be used in parallel operations
                #old_snapshot_threshold = -1		# 1min-60d; -1 disables; 0 is immediate
                					# (change requires restart)
                #backend_flush_after = 0		# measured in pages, 0 disables


                #------------------------------------------------------------------------------
                # WRITE-AHEAD LOG
                #------------------------------------------------------------------------------

                # - Settings -

                #wal_level = replica			# minimal, replica, or logical
                					# (change requires restart)
                #fsync = on				# flush data to disk for crash safety
                					# (turning this off can cause
                					# unrecoverable data corruption)
                #synchronous_commit = on		# synchronization level;
                					# off, local, remote_write, remote_apply, or on
                #wal_sync_method = fsync		# the default is the first option
                					# supported by the operating system:
                					#   open_datasync
                					#   fdatasync (default on Linux)
                					#   fsync
                					#   fsync_writethrough
                					#   open_sync
                #full_page_writes = on			# recover from partial page writes
                #wal_compression = off			# enable compression of full-page writes
                #wal_log_hints = off			# also do full page writes of non-critical updates
                					# (change requires restart)
                #wal_buffers = -1			# min 32kB, -1 sets based on shared_buffers
                					# (change requires restart)
                #wal_writer_delay = 200ms		# 1-10000 milliseconds
                #wal_writer_flush_after = 1MB		# measured in pages, 0 disables

                #commit_delay = 0			# range 0-100000, in microseconds
                #commit_siblings = 5			# range 1-1000

                # - Checkpoints -

                #checkpoint_timeout = 5min		# range 30s-1d
                max_wal_size = 1GB
                min_wal_size = 80MB
                #checkpoint_completion_target = 0.5	# checkpoint target duration, 0.0 - 1.0
                #checkpoint_flush_after = 256kB		# measured in pages, 0 disables
                #checkpoint_warning = 30s		# 0 disables

                # - Archiving -

                #archive_mode = off		# enables archiving; off, on, or always
                				# (change requires restart)
                #archive_command = '''		# command to use to archive a logfile segment
                				# placeholders: %p = path of file to archive
                				#               %f = file name only
                				# e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'
                #archive_timeout = 0		# force a logfile segment switch after this
                				# number of seconds; 0 disables


                #------------------------------------------------------------------------------
                # REPLICATION
                #------------------------------------------------------------------------------

                # - Sending Servers -

                # Set these on the master and on any standby that will send replication data.

                #max_wal_senders = 10		# max number of walsender processes
                				# (change requires restart)
                #wal_keep_segments = 0		# in logfile segments; 0 disables
                #wal_sender_timeout = 60s	# in milliseconds; 0 disables

                #max_replication_slots = 10	# max number of replication slots
                				# (change requires restart)
                #track_commit_timestamp = off	# collect timestamp of transaction commit
                				# (change requires restart)

                # - Master Server -

                # These settings are ignored on a standby server.

                #synchronous_standby_names = '''	# standby servers that provide sync rep
                				# method to choose sync standbys, number of sync standbys,
                				# and comma-separated list of application_name
                				# from standby(s); '*' = all
                #vacuum_defer_cleanup_age = 0	# number of xacts by which cleanup is delayed

                # - Standby Servers -

                # These settings are ignored on a master server.

                #hot_standby = on			# "off" disallows queries during recovery
                					# (change requires restart)
                #max_standby_archive_delay = 30s	# max delay before canceling queries
                					# when reading WAL from archive;
                					# -1 allows indefinite delay
                #max_standby_streaming_delay = 30s	# max delay before canceling queries
                					# when reading streaming WAL;
                					# -1 allows indefinite delay
                #wal_receiver_status_interval = 10s	# send replies at least this often
                					# 0 disables
                #hot_standby_feedback = off		# send info from standby to prevent
                					# query conflicts
                #wal_receiver_timeout = 60s		# time that receiver waits for
                					# communication from master
                					# in milliseconds; 0 disables
                #wal_retrieve_retry_interval = 5s	# time to wait before retrying to
                					# retrieve WAL after a failed attempt

                # - Subscribers -

                # These settings are ignored on a publisher.

                #max_logical_replication_workers = 4	# taken from max_worker_processes
                					# (change requires restart)
                #max_sync_workers_per_subscription = 2	# taken from max_logical_replication_workers


                #------------------------------------------------------------------------------
                # QUERY TUNING
                #------------------------------------------------------------------------------

                # - Planner Method Configuration -

                #enable_bitmapscan = on
                #enable_hashagg = on
                #enable_hashjoin = on
                #enable_indexscan = on
                #enable_indexonlyscan = on
                #enable_material = on
                #enable_mergejoin = on
                #enable_nestloop = on
                #enable_parallel_append = on
                #enable_seqscan = on
                #enable_sort = on
                #enable_tidscan = on
                #enable_partitionwise_join = off
                #enable_partitionwise_aggregate = off
                #enable_parallel_hash = on
                #enable_partition_pruning = on

                # - Planner Cost Constants -

                #seq_page_cost = 1.0			# measured on an arbitrary scale
                #random_page_cost = 4.0			# same scale as above
                #cpu_tuple_cost = 0.01			# same scale as above
                #cpu_index_tuple_cost = 0.005		# same scale as above
                #cpu_operator_cost = 0.0025		# same scale as above
                #parallel_tuple_cost = 0.1		# same scale as above
                #parallel_setup_cost = 1000.0	# same scale as above

                #jit_above_cost = 100000		# perform JIT compilation if available
                					# and query more expensive than this;
                					# -1 disables
                #jit_inline_above_cost = 500000		# inline small functions if query is
                					# more expensive than this; -1 disables
                #jit_optimize_above_cost = 500000	# use expensive JIT optimizations if
                					# query is more expensive than this;
                					# -1 disables

                #min_parallel_table_scan_size = 8MB
                #min_parallel_index_scan_size = 512kB
                #effective_cache_size = 4GB

                # - Genetic Query Optimizer -

                #geqo = on
                #geqo_threshold = 12
                #geqo_effort = 5			# range 1-10
                #geqo_pool_size = 0			# selects default based on effort
                #geqo_generations = 0			# selects default based on effort
                #geqo_selection_bias = 2.0		# range 1.5-2.0
                #geqo_seed = 0.0			# range 0.0-1.0

                # - Other Planner Options -

                #default_statistics_target = 100	# range 1-10000
                #constraint_exclusion = partition	# on, off, or partition
                #cursor_tuple_fraction = 0.1		# range 0.0-1.0
                #from_collapse_limit = 8
                #join_collapse_limit = 8		# 1 disables collapsing of explicit
                					# JOIN clauses
                #force_parallel_mode = off
                #jit = off				# allow JIT compilation


                #------------------------------------------------------------------------------
                # REPORTING AND LOGGING
                #------------------------------------------------------------------------------

                # - Where to Log -

                #log_destination = 'stderr'		# Valid values are combinations of
                					# stderr, csvlog, syslog, and eventlog,
                					# depending on platform.  csvlog
                					# requires logging_collector to be on.

                # This is used when logging to stderr:
                #logging_collector = off		# Enable capturing of stderr and csvlog
                					# into log files. Required to be on for
                					# csvlogs.
                					# (change requires restart)

                # These are only used if logging_collector is on:
                #log_directory = 'log'			# directory where log files are written,
                					# can be absolute or relative to PGDATA
                #log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'	# log file name pattern,
                					# can include strftime() escapes
                #log_file_mode = 0600			# creation mode for log files,
                					# begin with 0 to use octal notation
                #log_truncate_on_rotation = off		# If on, an existing log file with the
                					# same name as the new log file will be
                					# truncated rather than appended to.
                					# But such truncation only occurs on
                					# time-driven rotation, not on restarts
                					# or size-driven rotation.  Default is
                					# off, meaning append to existing files
                					# in all cases.
                #log_rotation_age = 1d			# Automatic rotation of logfiles will
                					# happen after that time.  0 disables.
                #log_rotation_size = 10MB		# Automatic rotation of logfiles will
                					# happen after that much log output.
                					# 0 disables.

                # These are relevant when logging to syslog:
                #syslog_facility = 'LOCAL0'
                #syslog_ident = 'postgres'
                #syslog_sequence_numbers = on
                #syslog_split_messages = on

                # This is only relevant when logging to eventlog (win32):
                # (change requires restart)
                #event_source = 'PostgreSQL'

                # - When to Log -

                #log_min_messages = warning		# values in order of decreasing detail:
                					#   debug5
                					#   debug4
                					#   debug3
                					#   debug2
                					#   debug1
                					#   info
                					#   notice
                					#   warning
                					#   error
                					#   log
                					#   fatal
                					#   panic

                #log_min_error_statement = error	# values in order of decreasing detail:
                					#   debug5
                					#   debug4
                					#   debug3
                					#   debug2
                					#   debug1
                					#   info
                					#   notice
                					#   warning
                					#   error
                					#   log
                					#   fatal
                					#   panic (effectively off)

                #log_min_duration_statement = -1	# -1 is disabled, 0 logs all statements
                					# and their durations, > 0 logs only
                					# statements running at least this number
                					# of milliseconds


                # - What to Log -

                #debug_print_parse = off
                #debug_print_rewritten = off
                #debug_print_plan = off
                #debug_pretty_print = on
                #log_checkpoints = off
                #log_connections = off
                #log_disconnections = off
                #log_duration = off
                #log_error_verbosity = default		# terse, default, or verbose messages
                #log_hostname = off
                #log_line_prefix = '%m [%p] '		# special values:
                					#   %a = application name
                					#   %u = user name
                					#   %d = database name
                					#   %r = remote host and port
                					#   %h = remote host
                					#   %p = process ID
                					#   %t = timestamp without milliseconds
                					#   %m = timestamp with milliseconds
                					#   %n = timestamp with milliseconds (as a Unix epoch)
                					#   %i = command tag
                					#   %e = SQL state
                					#   %c = session ID
                					#   %l = session line number
                					#   %s = session start timestamp
                					#   %v = virtual transaction ID
                					#   %x = transaction ID (0 if none)
                					#   %q = stop here in non-session
                					#        processes
                					#   %% = '%'
                					# e.g. '<%u%%%d> '
                #log_lock_waits = off			# log lock waits >= deadlock_timeout
                #log_statement = 'none'			# none, ddl, mod, all
                #log_replication_commands = off
                #log_temp_files = -1			# log temporary files equal or larger
                					# than the specified size in kilobytes;
                					# -1 disables, 0 logs all temp files
                log_timezone = 'Etc/UTC'

                #------------------------------------------------------------------------------
                # PROCESS TITLE
                #------------------------------------------------------------------------------

                #cluster_name = '''			# added to process titles if nonempty
                					# (change requires restart)
                #update_process_title = on


                #------------------------------------------------------------------------------
                # STATISTICS
                #------------------------------------------------------------------------------

                # - Query and Index Statistics Collector -

                #track_activities = on
                #track_counts = on
                #track_io_timing = off
                #track_functions = none			# none, pl, all
                #track_activity_query_size = 1024	# (change requires restart)
                #stats_temp_directory = 'pg_stat_tmp'


                # - Monitoring -

                #log_parser_stats = off
                #log_planner_stats = off
                #log_executor_stats = off
                #log_statement_stats = off


                #------------------------------------------------------------------------------
                # AUTOVACUUM
                #------------------------------------------------------------------------------

                #autovacuum = on			# Enable autovacuum subprocess?  'on'
                					# requires track_counts to also be on.
                #log_autovacuum_min_duration = -1	# -1 disables, 0 logs all actions and
                					# their durations, > 0 logs only
                					# actions running at least this number
                					# of milliseconds.
                #autovacuum_max_workers = 3		# max number of autovacuum subprocesses
                					# (change requires restart)
                #autovacuum_naptime = 1min		# time between autovacuum runs
                #autovacuum_vacuum_threshold = 50	# min number of row updates before
                					# vacuum
                #autovacuum_analyze_threshold = 50	# min number of row updates before
                					# analyze
                #autovacuum_vacuum_scale_factor = 0.2	# fraction of table size before vacuum
                #autovacuum_analyze_scale_factor = 0.1	# fraction of table size before analyze
                #autovacuum_freeze_max_age = 200000000	# maximum XID age before forced vacuum
                					# (change requires restart)
                #autovacuum_multixact_freeze_max_age = 400000000	# maximum multixact age
                					# before forced vacuum
                					# (change requires restart)
                #autovacuum_vacuum_cost_delay = 20ms	# default vacuum cost delay for
                					# autovacuum, in milliseconds;
                					# -1 means use vacuum_cost_delay
                #autovacuum_vacuum_cost_limit = -1	# default vacuum cost limit for
                					# autovacuum, -1 means use
                					# vacuum_cost_limit


                #------------------------------------------------------------------------------
                # CLIENT CONNECTION DEFAULTS
                #------------------------------------------------------------------------------

                # - Statement Behavior -

                #client_min_messages = notice		# values in order of decreasing detail:
                					#   debug5
                					#   debug4
                					#   debug3
                					#   debug2
                					#   debug1
                					#   log
                					#   notice
                					#   warning
                					#   error
                #search_path = '"$user", public'	# schema names
                #row_security = on
                #default_tablespace = '''		# a tablespace name, ''' uses the default
                #temp_tablespaces = '''			# a list of tablespace names, ''' uses
                					# only default tablespace
                #check_function_bodies = on
                #default_transaction_isolation = 'read committed'
                #default_transaction_read_only = off
                #default_transaction_deferrable = off
                #session_replication_role = 'origin'
                #statement_timeout = 0			# in milliseconds, 0 is disabled
                #lock_timeout = 0			# in milliseconds, 0 is disabled
                #idle_in_transaction_session_timeout = 0	# in milliseconds, 0 is disabled
                #vacuum_freeze_min_age = 50000000
                #vacuum_freeze_table_age = 150000000
                #vacuum_multixact_freeze_min_age = 5000000
                #vacuum_multixact_freeze_table_age = 150000000
                #vacuum_cleanup_index_scale_factor = 0.1	# fraction of total number of tuples
                						# before index cleanup, 0 always performs
                						# index cleanup
                #bytea_output = 'hex'			# hex, escape
                #xmlbinary = 'base64'
                #xmloption = 'content'
                #gin_fuzzy_search_limit = 0
                #gin_pending_list_limit = 4MB

                # - Locale and Formatting -

                datestyle = 'iso, mdy'
                #intervalstyle = 'postgres'
                timezone = 'Etc/UTC'
                #timezone_abbreviations = 'Default'     # Select the set of available time zone
                					# abbreviations.  Currently, there are
                					#   Default
                					#   Australia (historical usage)
                					#   India
                					# You can create your own file in
                					# share/timezonesets/.
                #extra_float_digits = 0			# min -15, max 3
                #client_encoding = sql_ascii		# actually, defaults to database
                					# encoding

                # These settings are initialized by initdb, but they can be changed.
                lc_messages = 'en_US.utf8'			# locale for system error message
                					# strings
                lc_monetary = 'en_US.utf8'			# locale for monetary formatting
                lc_numeric = 'en_US.utf8'			# locale for number formatting
                lc_time = 'en_US.utf8'				# locale for time formatting

                # default configuration for text search
                default_text_search_config = 'pg_catalog.english'

                # - Shared Library Preloading -

                #shared_preload_libraries = '''	# (change requires restart)
                #local_preload_libraries = '''
                #session_preload_libraries = '''
                #jit_provider = 'llvmjit'		# JIT library to use

                # - Other Defaults -

                #dynamic_library_path = '$libdir'


                #------------------------------------------------------------------------------
                # LOCK MANAGEMENT
                #------------------------------------------------------------------------------

                #deadlock_timeout = 1s
                #max_locks_per_transaction = 64		# min 10
                					# (change requires restart)
                #max_pred_locks_per_transaction = 64	# min 10
                					# (change requires restart)
                #max_pred_locks_per_relation = -2	# negative values mean
                					# (max_pred_locks_per_transaction
                					#  / -max_pred_locks_per_relation) - 1
                #max_pred_locks_per_page = 2            # min 0


                #------------------------------------------------------------------------------
                # VERSION AND PLATFORM COMPATIBILITY
                #------------------------------------------------------------------------------

                # - Previous PostgreSQL Versions -

                #array_nulls = on
                #backslash_quote = safe_encoding	# on, off, or safe_encoding
                #default_with_oids = off
                #escape_string_warning = on
                #lo_compat_privileges = off
                #operator_precedence_warning = off
                #quote_all_identifiers = off
                #standard_conforming_strings = on
                #synchronize_seqscans = on

                # - Other Platforms and Clients -

                #transform_null_equals = off


                #------------------------------------------------------------------------------
                # ERROR HANDLING
                #------------------------------------------------------------------------------

                #exit_on_error = off			# terminate session on any error?
                #restart_after_crash = on		# reinitialize after backend crash?
                #data_sync_retry = off			# retry or panic on failure to fsync
                					# data?
                					# (change requires restart)


                #------------------------------------------------------------------------------
                # CONFIG FILE INCLUDES
                #------------------------------------------------------------------------------

                # These options allow settings to be loaded from files other than the
                # default postgresql.conf.

                #include_dir = '''			# include files ending in '.conf' from
                					# a directory, e.g., 'conf.d'
                #include_if_exists = '''			# include file only if it exists
                #include = '''				# include file


                #------------------------------------------------------------------------------
                # CUSTOMIZED OPTIONS
                #------------------------------------------------------------------------------

                # Add settings for extensions here
                ''
            }
        )
    , immutable = None Bool
    , kind = "ConfigMap"
    , metadata =
      { annotations = Some
          (toMap { description = "Configuration for PostgreSQL" })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "pgsql"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "pgsql-conf"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    }
  , Deployment.pgsql
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          (toMap { description = "Postgres database for various data." })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "pgsql"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "pgsql"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "pgsql" })
        }
      , strategy = Some
        { rollingUpdate =
            None
              { maxSurge : Optional < Int : Natural | String : Text >
              , maxUnavailable : Optional < Int : Natural | String : Text >
              }
        , type = Some "Recreate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              ( toMap
                  { group = "backend", app = "pgsql", deploy = "sourcegraph" }
              )
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/postgres-11.4:insiders@sha256:63090799b34b3115a387d96fe2227a37999d432b774a1d9b7966b8c5d81b56ad"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = Some { command = Some [ "/liveness.sh" ] }
                , failureThreshold = None Natural
                , httpGet =
                    None
                      { host : Optional Text
                      , httpHeaders :
                          Optional (List { name : Text, value : Text })
                      , path : Optional Text
                      , port : < Int : Natural | String : Text >
                      , scheme : Optional Text
                      }
                , initialDelaySeconds = Some 15
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = None Natural
                }
              , name = "pgsql"
              , ports = Some
                [ { containerPort = 5432
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "pgsql"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = Some { command = Some [ "/ready.sh" ] }
                , failureThreshold = None Natural
                , httpGet =
                    None
                      { host : Optional Text
                      , httpHeaders :
                          Optional (List { name : Text, value : Text })
                      , path : Optional Text
                      , port : < Int : Natural | String : Text >
                      , scheme : Optional Text
                      }
                , initialDelaySeconds = None Natural
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = None Natural
                }
              , resources = Some
                { limits = Some (toMap { memory = "2Gi", cpu = "4" })
                , requests = Some (toMap { memory = "2Gi", cpu = "4" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data"
                  , mountPropagation = None Text
                  , name = "disk"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/conf"
                  , mountPropagation = None Text
                  , name = "pgsql-conf"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = None (List Text)
              , command = None (List Text)
              , env = Some
                [ { name = "DATA_SOURCE_NAME"
                  , value = Some
                      "postgres://sg:@localhost:5432/?sslmode=disable"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "wrouesnel/postgres_exporter:v0.7.0@sha256:785c919627c06f540d515aac88b7966f352403f73e931e70dc2cbf783146a98b"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "pgsql-exporter"
              , ports =
                  None
                    ( List
                        { containerPort : Natural
                        , hostIP : Optional Text
                        , hostPort : Optional Natural
                        , name : Optional Text
                        , protocol : Optional Text
                        }
                    )
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "50Mi", cpu = "10m" })
                , requests = Some (toMap { memory = "50Mi", cpu = "10m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers = Some
            [ { args = None (List Text)
              , command = Some
                [ "sh"
                , "-c"
                , "if [ -d /data/pgdata-11 ]; then chmod 750 /data/pgdata-11; fi"
                ]
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "sourcegraph/alpine:3.12@sha256:133a0a767b836cf86a011101995641cf1b5cbefb3dd212d78d7be145adde636d"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "correct-data-dir-permissions"
              , ports =
                  None
                    ( List
                        { containerPort : Natural
                        , hostIP : Optional Text
                        , hostPort : Optional Natural
                        , name : Optional Text
                        , protocol : Optional Text
                        }
                    )
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources =
                  None
                    { limits :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , requests :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , securityContext = Some
                { allowPrivilegeEscalation = None Bool
                , capabilities =
                    None
                      { add : Optional (List Text)
                      , drop : Optional (List Text)
                      }
                , privileged = None Bool
                , procMount = None Text
                , readOnlyRootFilesystem = None Bool
                , runAsGroup = None Natural
                , runAsNonRoot = None Bool
                , runAsUser = Some 0
                , seLinuxOptions =
                    None
                      { level : Optional Text
                      , role : Optional Text
                      , type : Optional Text
                      , user : Optional Text
                      }
                , windowsOptions =
                    None
                      { gmsaCredentialSpec : Optional Text
                      , gmsaCredentialSpecName : Optional Text
                      , runAsUserName : Optional Text
                      }
                }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/data"
                  , mountPropagation = None Text
                  , name = "disk"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            ]
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "disk"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim = Some
                { claimName = "pgsql", readOnly = None Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap = Some
                { defaultMode = Some 511
                , items =
                    None
                      ( List
                          { key : Text, mode : Optional Natural, path : Text }
                      )
                , name = Some "pgsql-conf"
                , optional = None Bool
                }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "pgsql-conf"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , PersistentVolumeClaim.pgsql
    =
    { apiVersion = "v1"
    , kind = "PersistentVolumeClaim"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "pgsql"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "pgsql"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { accessModes = Some [ "ReadWriteOnce" ]
      , dataSource = None { apiGroup : Optional Text, kind : Text, name : Text }
      , resources = Some
        { limits = None (List { mapKey : Text, mapValue : Text })
        , requests = Some (toMap { storage = "200Gi" })
        }
      , selector =
          None
            { matchExpressions :
                Optional
                  ( List
                      { key : Text
                      , operator : Text
                      , values : Optional (List Text)
                      }
                  )
            , matchLabels : Optional (List { mapKey : Text, mapValue : Text })
            }
      , storageClassName = Some "sourcegraph"
      , volumeMode = None Text
      , volumeName = None Text
      }
    , status =
        None
          { accessModes : Optional (List Text)
          , capacity : Optional (List { mapKey : Text, mapValue : Text })
          , conditions :
              Optional
                ( List
                    { lastProbeTime : Optional Text
                    , lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , phase : Optional Text
          }
    }
  , Service.pgsql
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "9187"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "pgsql"
              , `app.kubernetes.io/component` = "pgsql"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "pgsql"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "pgsql"
          , nodePort = None Natural
          , port = 5432
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "pgsql")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "pgsql" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Precise-Code-Intel =
  { Deployment =
    { precise-code-intel-bundle-manager =
      { apiVersion = "apps/v1"
      , kind = "Deployment"
      , metadata =
        { annotations = Some
            ( toMap
                { description =
                    "Stores and manages precise code intelligence bundles."
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , `app.kubernetes.io/component` = "precise-code-intel"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "precise-code-intel-bundle-manager"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { minReadySeconds = Some 10
        , paused = None Bool
        , progressDeadlineSeconds = None Natural
        , replicas = Some 1
        , revisionHistoryLimit = Some 10
        , selector =
          { matchExpressions =
              None
                ( List
                    { key : Text
                    , operator : Text
                    , values : Optional (List Text)
                    }
                )
          , matchLabels = Some
              (toMap { app = "precise-code-intel-bundle-manager" })
          }
        , strategy = Some
          { rollingUpdate =
              None
                { maxSurge : Optional < Int : Natural | String : Text >
                , maxUnavailable : Optional < Int : Natural | String : Text >
                }
          , type = Some "Recreate"
          }
        , template =
          { metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = Some
                ( toMap
                    { app = "precise-code-intel-bundle-manager"
                    , deploy = "sourcegraph"
                    }
                )
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = None Text
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { activeDeadlineSeconds = None Natural
            , affinity =
                None
                  { nodeAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { preference :
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchFields :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              { nodeSelectorTerms :
                                  List
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                              }
                        }
                  , podAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  , podAntiAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  }
            , automountServiceAccountToken = None Bool
            , containers =
              [ { args = None (List Text)
                , command = None (List Text)
                , env = Some
                  [ { name = "PRECISE_CODE_INTEL_BUNDLE_DIR"
                    , value = Some "/lsif-storage"
                    , valueFrom =
                        None
                          { configMapKeyRef :
                              Optional
                                { key : Text
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , fieldRef :
                              Optional
                                { apiVersion : Optional Text, fieldPath : Text }
                          , resourceFieldRef :
                              Optional
                                { containerName : Optional Text
                                , divisor : Optional Text
                                , resource : Text
                                }
                          , secretKeyRef :
                              Optional
                                { key : Text
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                    }
                  , { name = "POD_NAME"
                    , value = None Text
                    , valueFrom = Some
                      { configMapKeyRef =
                          None
                            { key : Text
                            , name : Optional Text
                            , optional : Optional Bool
                            }
                      , fieldRef = Some
                        { apiVersion = None Text, fieldPath = "metadata.name" }
                      , resourceFieldRef =
                          None
                            { containerName : Optional Text
                            , divisor : Optional Text
                            , resource : Text
                            }
                      , secretKeyRef =
                          None
                            { key : Text
                            , name : Optional Text
                            , optional : Optional Bool
                            }
                      }
                    }
                  ]
                , envFrom =
                    None
                      ( List
                          { configMapRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          , prefix : Optional Text
                          , secretRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                      )
                , image = Some
                    "index.docker.io/sourcegraph/precise-code-intel-bundle-manager:insiders@sha256:defc89dbf8713541c08321acbab5d145099a300703949d938b491be68617d351"
                , imagePullPolicy = None Text
                , lifecycle =
                    None
                      { postStart :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      , preStop :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      }
                , livenessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet = Some
                    { host = None Text
                    , httpHeaders = None (List { name : Text, value : Text })
                    , path = Some "/healthz"
                    , port = < Int : Natural | String : Text >.String "http"
                    , scheme = Some "HTTP"
                    }
                  , initialDelaySeconds = Some 60
                  , periodSeconds = None Natural
                  , successThreshold = None Natural
                  , tcpSocket =
                      None
                        { host : Optional Text
                        , port : < Int : Natural | String : Text >
                        }
                  , timeoutSeconds = Some 5
                  }
                , name = "precise-code-intel-bundle-manager"
                , ports = Some
                  [ { containerPort = 3187
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "http"
                    , protocol = None Text
                    }
                  , { containerPort = 6060
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "debug"
                    , protocol = None Text
                    }
                  ]
                , readinessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet = Some
                    { host = None Text
                    , httpHeaders = None (List { name : Text, value : Text })
                    , path = Some "/healthz"
                    , port = < Int : Natural | String : Text >.String "http"
                    , scheme = Some "HTTP"
                    }
                  , initialDelaySeconds = None Natural
                  , periodSeconds = Some 5
                  , successThreshold = None Natural
                  , tcpSocket =
                      None
                        { host : Optional Text
                        , port : < Int : Natural | String : Text >
                        }
                  , timeoutSeconds = Some 5
                  }
                , resources = Some
                  { limits = Some (toMap { memory = "2G", cpu = "2" })
                  , requests = Some (toMap { memory = "500M", cpu = "500m" })
                  }
                , securityContext =
                    None
                      { allowPrivilegeEscalation : Optional Bool
                      , capabilities :
                          Optional
                            { add : Optional (List Text)
                            , drop : Optional (List Text)
                            }
                      , privileged : Optional Bool
                      , procMount : Optional Text
                      , readOnlyRootFilesystem : Optional Bool
                      , runAsGroup : Optional Natural
                      , runAsNonRoot : Optional Bool
                      , runAsUser : Optional Natural
                      , seLinuxOptions :
                          Optional
                            { level : Optional Text
                            , role : Optional Text
                            , type : Optional Text
                            , user : Optional Text
                            }
                      , windowsOptions :
                          Optional
                            { gmsaCredentialSpec : Optional Text
                            , gmsaCredentialSpecName : Optional Text
                            , runAsUserName : Optional Text
                            }
                      }
                , startupProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , stdin = None Bool
                , stdinOnce = None Bool
                , terminationMessagePath = None Text
                , terminationMessagePolicy = Some "FallbackToLogsOnError"
                , tty = None Bool
                , volumeDevices = None (List { devicePath : Text, name : Text })
                , volumeMounts = Some
                  [ { mountPath = "/lsif-storage"
                    , mountPropagation = None Text
                    , name = "bundle-manager"
                    , readOnly = None Bool
                    , subPath = None Text
                    , subPathExpr = None Text
                    }
                  ]
                , workingDir = None Text
                }
              ]
            , dnsConfig =
                None
                  { nameservers : Optional (List Text)
                  , options :
                      Optional
                        (List { name : Optional Text, value : Optional Text })
                  , searches : Optional (List Text)
                  }
            , dnsPolicy = None Text
            , enableServiceLinks = None Bool
            , ephemeralContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , targetContainerName : Optional Text
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , hostAliases =
                None
                  ( List
                      { hostnames : Optional (List Text), ip : Optional Text }
                  )
            , hostIPC = None Bool
            , hostNetwork = None Bool
            , hostPID = None Bool
            , hostname = None Text
            , imagePullSecrets = None (List { name : Optional Text })
            , initContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , nodeName = None Text
            , nodeSelector = None (List { mapKey : Text, mapValue : Text })
            , overhead = None (List { mapKey : Text, mapValue : Text })
            , preemptionPolicy = None Text
            , priority = None Natural
            , priorityClassName = None Text
            , readinessGates = None (List { conditionType : Text })
            , restartPolicy = None Text
            , runtimeClassName = None Text
            , schedulerName = None Text
            , securityContext = Some
              { fsGroup = None Natural
              , fsGroupChangePolicy = None Text
              , runAsGroup = None Natural
              , runAsNonRoot = None Bool
              , runAsUser = Some 0
              , seLinuxOptions =
                  None
                    { level : Optional Text
                    , role : Optional Text
                    , type : Optional Text
                    , user : Optional Text
                    }
              , supplementalGroups = None (List Natural)
              , sysctls = None (List { name : Text, value : Text })
              , windowsOptions =
                  None
                    { gmsaCredentialSpec : Optional Text
                    , gmsaCredentialSpecName : Optional Text
                    , runAsUserName : Optional Text
                    }
              }
            , serviceAccount = None Text
            , serviceAccountName = None Text
            , shareProcessNamespace = None Bool
            , subdomain = None Text
            , terminationGracePeriodSeconds = None Natural
            , tolerations =
                None
                  ( List
                      { effect : Optional Text
                      , key : Optional Text
                      , operator : Optional Text
                      , tolerationSeconds : Optional Natural
                      , value : Optional Text
                      }
                  )
            , topologySpreadConstraints =
                None
                  ( List
                      { labelSelector :
                          Optional
                            { matchExpressions :
                                Optional
                                  ( List
                                      { key : Text
                                      , operator : Text
                                      , values : Optional (List Text)
                                      }
                                  )
                            , matchLabels :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , maxSkew : Natural
                      , topologyKey : Text
                      , whenUnsatisfiable : Text
                      }
                  )
            , volumes = Some
              [ { awsElasticBlockStore =
                    None
                      { fsType : Optional Text
                      , partition : Optional Natural
                      , readOnly : Optional Bool
                      , volumeID : Text
                      }
                , azureDisk =
                    None
                      { cachingMode : Optional Text
                      , diskName : Text
                      , diskURI : Text
                      , fsType : Optional Text
                      , kind : Text
                      , readOnly : Optional Bool
                      }
                , azureFile =
                    None
                      { readOnly : Optional Bool
                      , secretName : Text
                      , shareName : Text
                      }
                , cephfs =
                    None
                      { monitors : List Text
                      , path : Optional Text
                      , readOnly : Optional Bool
                      , secretFile : Optional Text
                      , secretRef : Optional { name : Optional Text }
                      , user : Optional Text
                      }
                , cinder =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , volumeID : Text
                      }
                , configMap =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { key : Text
                                , mode : Optional Natural
                                , path : Text
                                }
                            )
                      , name : Optional Text
                      , optional : Optional Bool
                      }
                , csi =
                    None
                      { driver : Text
                      , fsType : Optional Text
                      , nodePublishSecretRef : Optional { name : Optional Text }
                      , readOnly : Optional Bool
                      , volumeAttributes :
                          Optional (List { mapKey : Text, mapValue : Text })
                      }
                , downwardAPI =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , mode : Optional Natural
                                , path : Text
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                }
                            )
                      }
                , emptyDir =
                    None { medium : Optional Text, sizeLimit : Optional Text }
                , fc =
                    None
                      { fsType : Optional Text
                      , lun : Optional Natural
                      , readOnly : Optional Bool
                      , targetWWNs : Optional (List Text)
                      , wwids : Optional (List Text)
                      }
                , flexVolume =
                    None
                      { driver : Text
                      , fsType : Optional Text
                      , options :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      }
                , flocker =
                    None
                      { datasetName : Optional Text
                      , datasetUUID : Optional Text
                      }
                , gcePersistentDisk =
                    None
                      { fsType : Optional Text
                      , partition : Optional Natural
                      , pdName : Text
                      , readOnly : Optional Bool
                      }
                , gitRepo =
                    None
                      { directory : Optional Text
                      , repository : Text
                      , revision : Optional Text
                      }
                , glusterfs =
                    None
                      { endpoints : Text
                      , path : Text
                      , readOnly : Optional Bool
                      }
                , hostPath = None { path : Text, type : Optional Text }
                , iscsi =
                    None
                      { chapAuthDiscovery : Optional Bool
                      , chapAuthSession : Optional Bool
                      , fsType : Optional Text
                      , initiatorName : Optional Text
                      , iqn : Text
                      , iscsiInterface : Optional Text
                      , lun : Natural
                      , portals : Optional (List Text)
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , targetPortal : Text
                      }
                , name = "bundle-manager"
                , nfs =
                    None
                      { path : Text, readOnly : Optional Bool, server : Text }
                , persistentVolumeClaim = Some
                  { claimName = "bundle-manager", readOnly = None Bool }
                , photonPersistentDisk =
                    None { fsType : Optional Text, pdID : Text }
                , portworxVolume =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , volumeID : Text
                      }
                , projected =
                    None
                      { defaultMode : Optional Natural
                      , sources :
                          List
                            { configMap :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { key : Text
                                            , mode : Optional Natural
                                            , path : Text
                                            }
                                        )
                                  , name : Optional Text
                                  , optional : Optional Bool
                                  }
                            , downwardAPI :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { fieldRef :
                                                Optional
                                                  { apiVersion : Optional Text
                                                  , fieldPath : Text
                                                  }
                                            , mode : Optional Natural
                                            , path : Text
                                            , resourceFieldRef :
                                                Optional
                                                  { containerName :
                                                      Optional Text
                                                  , divisor : Optional Text
                                                  , resource : Text
                                                  }
                                            }
                                        )
                                  }
                            , secret :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { key : Text
                                            , mode : Optional Natural
                                            , path : Text
                                            }
                                        )
                                  , name : Optional Text
                                  , optional : Optional Bool
                                  }
                            , serviceAccountToken :
                                Optional
                                  { audience : Optional Text
                                  , expirationSeconds : Optional Natural
                                  , path : Text
                                  }
                            }
                      }
                , quobyte =
                    None
                      { group : Optional Text
                      , readOnly : Optional Bool
                      , registry : Text
                      , tenant : Optional Text
                      , user : Optional Text
                      , volume : Text
                      }
                , rbd =
                    None
                      { fsType : Optional Text
                      , image : Text
                      , keyring : Optional Text
                      , monitors : List Text
                      , pool : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , user : Optional Text
                      }
                , scaleIO =
                    None
                      { fsType : Optional Text
                      , gateway : Text
                      , protectionDomain : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : { name : Optional Text }
                      , sslEnabled : Optional Bool
                      , storageMode : Optional Text
                      , storagePool : Optional Text
                      , system : Text
                      , volumeName : Optional Text
                      }
                , secret =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { key : Text
                                , mode : Optional Natural
                                , path : Text
                                }
                            )
                      , optional : Optional Bool
                      , secretName : Optional Text
                      }
                , storageos =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , volumeName : Optional Text
                      , volumeNamespace : Optional Text
                      }
                , vsphereVolume =
                    None
                      { fsType : Optional Text
                      , storagePolicyID : Optional Text
                      , storagePolicyName : Optional Text
                      , volumePath : Text
                      }
                }
              ]
            }
          }
        }
      , status =
          None
            { availableReplicas : Optional Natural
            , collisionCount : Optional Natural
            , conditions :
                Optional
                  ( List
                      { lastTransitionTime : Optional Text
                      , lastUpdateTime : Optional Text
                      , message : Optional Text
                      , reason : Optional Text
                      , status : Text
                      , type : Text
                      }
                  )
            , observedGeneration : Optional Natural
            , readyReplicas : Optional Natural
            , replicas : Optional Natural
            , unavailableReplicas : Optional Natural
            , updatedReplicas : Optional Natural
            }
      }
    , precise-code-intel-worker =
      { apiVersion = "apps/v1"
      , kind = "Deployment"
      , metadata =
        { annotations = Some
            ( toMap
                { description =
                    "Handles conversion of uploaded precise code intelligence bundles."
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , `app.kubernetes.io/component` = "precise-code-intel"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "precise-code-intel-worker"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { minReadySeconds = Some 10
        , paused = None Bool
        , progressDeadlineSeconds = None Natural
        , replicas = Some 1
        , revisionHistoryLimit = Some 10
        , selector =
          { matchExpressions =
              None
                ( List
                    { key : Text
                    , operator : Text
                    , values : Optional (List Text)
                    }
                )
          , matchLabels = Some (toMap { app = "precise-code-intel-worker" })
          }
        , strategy = Some
          { rollingUpdate = Some
            { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
            , maxUnavailable = Some (< Int : Natural | String : Text >.Int 1)
            }
          , type = Some "RollingUpdate"
          }
        , template =
          { metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = Some
                ( toMap
                    { app = "precise-code-intel-worker"
                    , deploy = "sourcegraph"
                    }
                )
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = None Text
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { activeDeadlineSeconds = None Natural
            , affinity =
                None
                  { nodeAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { preference :
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchFields :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              { nodeSelectorTerms :
                                  List
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                              }
                        }
                  , podAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  , podAntiAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  }
            , automountServiceAccountToken = None Bool
            , containers =
              [ { args = None (List Text)
                , command = None (List Text)
                , env = Some
                  [ { name = "NUM_WORKERS"
                    , value = Some "4"
                    , valueFrom =
                        None
                          { configMapKeyRef :
                              Optional
                                { key : Text
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , fieldRef :
                              Optional
                                { apiVersion : Optional Text, fieldPath : Text }
                          , resourceFieldRef :
                              Optional
                                { containerName : Optional Text
                                , divisor : Optional Text
                                , resource : Text
                                }
                          , secretKeyRef :
                              Optional
                                { key : Text
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                    }
                  , { name = "PRECISE_CODE_INTEL_BUNDLE_MANAGER_URL"
                    , value = Some
                        "http://precise-code-intel-bundle-manager:3187"
                    , valueFrom =
                        None
                          { configMapKeyRef :
                              Optional
                                { key : Text
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , fieldRef :
                              Optional
                                { apiVersion : Optional Text, fieldPath : Text }
                          , resourceFieldRef :
                              Optional
                                { containerName : Optional Text
                                , divisor : Optional Text
                                , resource : Text
                                }
                          , secretKeyRef :
                              Optional
                                { key : Text
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                    }
                  , { name = "POD_NAME"
                    , value = None Text
                    , valueFrom = Some
                      { configMapKeyRef =
                          None
                            { key : Text
                            , name : Optional Text
                            , optional : Optional Bool
                            }
                      , fieldRef = Some
                        { apiVersion = None Text, fieldPath = "metadata.name" }
                      , resourceFieldRef =
                          None
                            { containerName : Optional Text
                            , divisor : Optional Text
                            , resource : Text
                            }
                      , secretKeyRef =
                          None
                            { key : Text
                            , name : Optional Text
                            , optional : Optional Bool
                            }
                      }
                    }
                  ]
                , envFrom =
                    None
                      ( List
                          { configMapRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          , prefix : Optional Text
                          , secretRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                      )
                , image = Some
                    "index.docker.io/sourcegraph/precise-code-intel-worker:insiders@sha256:7ad054d00a04777c11d42fa27d805b5f421b77b93ed6c112bdd89ad54c8da77d"
                , imagePullPolicy = None Text
                , lifecycle =
                    None
                      { postStart :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      , preStop :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      }
                , livenessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet = Some
                    { host = None Text
                    , httpHeaders = None (List { name : Text, value : Text })
                    , path = Some "/healthz"
                    , port = < Int : Natural | String : Text >.String "http"
                    , scheme = Some "HTTP"
                    }
                  , initialDelaySeconds = Some 60
                  , periodSeconds = None Natural
                  , successThreshold = None Natural
                  , tcpSocket =
                      None
                        { host : Optional Text
                        , port : < Int : Natural | String : Text >
                        }
                  , timeoutSeconds = Some 5
                  }
                , name = "precise-code-intel-worker"
                , ports = Some
                  [ { containerPort = 3188
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "http"
                    , protocol = None Text
                    }
                  , { containerPort = 6060
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "debug"
                    , protocol = None Text
                    }
                  ]
                , readinessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet = Some
                    { host = None Text
                    , httpHeaders = None (List { name : Text, value : Text })
                    , path = Some "/healthz"
                    , port = < Int : Natural | String : Text >.String "http"
                    , scheme = Some "HTTP"
                    }
                  , initialDelaySeconds = None Natural
                  , periodSeconds = Some 5
                  , successThreshold = None Natural
                  , tcpSocket =
                      None
                        { host : Optional Text
                        , port : < Int : Natural | String : Text >
                        }
                  , timeoutSeconds = Some 5
                  }
                , resources = Some
                  { limits = Some (toMap { memory = "4G", cpu = "2" })
                  , requests = Some (toMap { memory = "2G", cpu = "500m" })
                  }
                , securityContext =
                    None
                      { allowPrivilegeEscalation : Optional Bool
                      , capabilities :
                          Optional
                            { add : Optional (List Text)
                            , drop : Optional (List Text)
                            }
                      , privileged : Optional Bool
                      , procMount : Optional Text
                      , readOnlyRootFilesystem : Optional Bool
                      , runAsGroup : Optional Natural
                      , runAsNonRoot : Optional Bool
                      , runAsUser : Optional Natural
                      , seLinuxOptions :
                          Optional
                            { level : Optional Text
                            , role : Optional Text
                            , type : Optional Text
                            , user : Optional Text
                            }
                      , windowsOptions :
                          Optional
                            { gmsaCredentialSpec : Optional Text
                            , gmsaCredentialSpecName : Optional Text
                            , runAsUserName : Optional Text
                            }
                      }
                , startupProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , stdin = None Bool
                , stdinOnce = None Bool
                , terminationMessagePath = None Text
                , terminationMessagePolicy = Some "FallbackToLogsOnError"
                , tty = None Bool
                , volumeDevices = None (List { devicePath : Text, name : Text })
                , volumeMounts =
                    None
                      ( List
                          { mountPath : Text
                          , mountPropagation : Optional Text
                          , name : Text
                          , readOnly : Optional Bool
                          , subPath : Optional Text
                          , subPathExpr : Optional Text
                          }
                      )
                , workingDir = None Text
                }
              ]
            , dnsConfig =
                None
                  { nameservers : Optional (List Text)
                  , options :
                      Optional
                        (List { name : Optional Text, value : Optional Text })
                  , searches : Optional (List Text)
                  }
            , dnsPolicy = None Text
            , enableServiceLinks = None Bool
            , ephemeralContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , targetContainerName : Optional Text
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , hostAliases =
                None
                  ( List
                      { hostnames : Optional (List Text), ip : Optional Text }
                  )
            , hostIPC = None Bool
            , hostNetwork = None Bool
            , hostPID = None Bool
            , hostname = None Text
            , imagePullSecrets = None (List { name : Optional Text })
            , initContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , nodeName = None Text
            , nodeSelector = None (List { mapKey : Text, mapValue : Text })
            , overhead = None (List { mapKey : Text, mapValue : Text })
            , preemptionPolicy = None Text
            , priority = None Natural
            , priorityClassName = None Text
            , readinessGates = None (List { conditionType : Text })
            , restartPolicy = None Text
            , runtimeClassName = None Text
            , schedulerName = None Text
            , securityContext = Some
              { fsGroup = None Natural
              , fsGroupChangePolicy = None Text
              , runAsGroup = None Natural
              , runAsNonRoot = None Bool
              , runAsUser = Some 0
              , seLinuxOptions =
                  None
                    { level : Optional Text
                    , role : Optional Text
                    , type : Optional Text
                    , user : Optional Text
                    }
              , supplementalGroups = None (List Natural)
              , sysctls = None (List { name : Text, value : Text })
              , windowsOptions =
                  None
                    { gmsaCredentialSpec : Optional Text
                    , gmsaCredentialSpecName : Optional Text
                    , runAsUserName : Optional Text
                    }
              }
            , serviceAccount = None Text
            , serviceAccountName = None Text
            , shareProcessNamespace = None Bool
            , subdomain = None Text
            , terminationGracePeriodSeconds = None Natural
            , tolerations =
                None
                  ( List
                      { effect : Optional Text
                      , key : Optional Text
                      , operator : Optional Text
                      , tolerationSeconds : Optional Natural
                      , value : Optional Text
                      }
                  )
            , topologySpreadConstraints =
                None
                  ( List
                      { labelSelector :
                          Optional
                            { matchExpressions :
                                Optional
                                  ( List
                                      { key : Text
                                      , operator : Text
                                      , values : Optional (List Text)
                                      }
                                  )
                            , matchLabels :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , maxSkew : Natural
                      , topologyKey : Text
                      , whenUnsatisfiable : Text
                      }
                  )
            , volumes =
                None
                  ( List
                      { awsElasticBlockStore :
                          Optional
                            { fsType : Optional Text
                            , partition : Optional Natural
                            , readOnly : Optional Bool
                            , volumeID : Text
                            }
                      , azureDisk :
                          Optional
                            { cachingMode : Optional Text
                            , diskName : Text
                            , diskURI : Text
                            , fsType : Optional Text
                            , kind : Text
                            , readOnly : Optional Bool
                            }
                      , azureFile :
                          Optional
                            { readOnly : Optional Bool
                            , secretName : Text
                            , shareName : Text
                            }
                      , cephfs :
                          Optional
                            { monitors : List Text
                            , path : Optional Text
                            , readOnly : Optional Bool
                            , secretFile : Optional Text
                            , secretRef : Optional { name : Optional Text }
                            , user : Optional Text
                            }
                      , cinder :
                          Optional
                            { fsType : Optional Text
                            , readOnly : Optional Bool
                            , secretRef : Optional { name : Optional Text }
                            , volumeID : Text
                            }
                      , configMap :
                          Optional
                            { defaultMode : Optional Natural
                            , items :
                                Optional
                                  ( List
                                      { key : Text
                                      , mode : Optional Natural
                                      , path : Text
                                      }
                                  )
                            , name : Optional Text
                            , optional : Optional Bool
                            }
                      , csi :
                          Optional
                            { driver : Text
                            , fsType : Optional Text
                            , nodePublishSecretRef :
                                Optional { name : Optional Text }
                            , readOnly : Optional Bool
                            , volumeAttributes :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , downwardAPI :
                          Optional
                            { defaultMode : Optional Natural
                            , items :
                                Optional
                                  ( List
                                      { fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , mode : Optional Natural
                                      , path : Text
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      }
                                  )
                            }
                      , emptyDir :
                          Optional
                            { medium : Optional Text
                            , sizeLimit : Optional Text
                            }
                      , fc :
                          Optional
                            { fsType : Optional Text
                            , lun : Optional Natural
                            , readOnly : Optional Bool
                            , targetWWNs : Optional (List Text)
                            , wwids : Optional (List Text)
                            }
                      , flexVolume :
                          Optional
                            { driver : Text
                            , fsType : Optional Text
                            , options :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , readOnly : Optional Bool
                            , secretRef : Optional { name : Optional Text }
                            }
                      , flocker :
                          Optional
                            { datasetName : Optional Text
                            , datasetUUID : Optional Text
                            }
                      , gcePersistentDisk :
                          Optional
                            { fsType : Optional Text
                            , partition : Optional Natural
                            , pdName : Text
                            , readOnly : Optional Bool
                            }
                      , gitRepo :
                          Optional
                            { directory : Optional Text
                            , repository : Text
                            , revision : Optional Text
                            }
                      , glusterfs :
                          Optional
                            { endpoints : Text
                            , path : Text
                            , readOnly : Optional Bool
                            }
                      , hostPath :
                          Optional { path : Text, type : Optional Text }
                      , iscsi :
                          Optional
                            { chapAuthDiscovery : Optional Bool
                            , chapAuthSession : Optional Bool
                            , fsType : Optional Text
                            , initiatorName : Optional Text
                            , iqn : Text
                            , iscsiInterface : Optional Text
                            , lun : Natural
                            , portals : Optional (List Text)
                            , readOnly : Optional Bool
                            , secretRef : Optional { name : Optional Text }
                            , targetPortal : Text
                            }
                      , name : Text
                      , nfs :
                          Optional
                            { path : Text
                            , readOnly : Optional Bool
                            , server : Text
                            }
                      , persistentVolumeClaim :
                          Optional
                            { claimName : Text, readOnly : Optional Bool }
                      , photonPersistentDisk :
                          Optional { fsType : Optional Text, pdID : Text }
                      , portworxVolume :
                          Optional
                            { fsType : Optional Text
                            , readOnly : Optional Bool
                            , volumeID : Text
                            }
                      , projected :
                          Optional
                            { defaultMode : Optional Natural
                            , sources :
                                List
                                  { configMap :
                                      Optional
                                        { items :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , mode : Optional Natural
                                                  , path : Text
                                                  }
                                              )
                                        , name : Optional Text
                                        , optional : Optional Bool
                                        }
                                  , downwardAPI :
                                      Optional
                                        { items :
                                            Optional
                                              ( List
                                                  { fieldRef :
                                                      Optional
                                                        { apiVersion :
                                                            Optional Text
                                                        , fieldPath : Text
                                                        }
                                                  , mode : Optional Natural
                                                  , path : Text
                                                  , resourceFieldRef :
                                                      Optional
                                                        { containerName :
                                                            Optional Text
                                                        , divisor :
                                                            Optional Text
                                                        , resource : Text
                                                        }
                                                  }
                                              )
                                        }
                                  , secret :
                                      Optional
                                        { items :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , mode : Optional Natural
                                                  , path : Text
                                                  }
                                              )
                                        , name : Optional Text
                                        , optional : Optional Bool
                                        }
                                  , serviceAccountToken :
                                      Optional
                                        { audience : Optional Text
                                        , expirationSeconds : Optional Natural
                                        , path : Text
                                        }
                                  }
                            }
                      , quobyte :
                          Optional
                            { group : Optional Text
                            , readOnly : Optional Bool
                            , registry : Text
                            , tenant : Optional Text
                            , user : Optional Text
                            , volume : Text
                            }
                      , rbd :
                          Optional
                            { fsType : Optional Text
                            , image : Text
                            , keyring : Optional Text
                            , monitors : List Text
                            , pool : Optional Text
                            , readOnly : Optional Bool
                            , secretRef : Optional { name : Optional Text }
                            , user : Optional Text
                            }
                      , scaleIO :
                          Optional
                            { fsType : Optional Text
                            , gateway : Text
                            , protectionDomain : Optional Text
                            , readOnly : Optional Bool
                            , secretRef : { name : Optional Text }
                            , sslEnabled : Optional Bool
                            , storageMode : Optional Text
                            , storagePool : Optional Text
                            , system : Text
                            , volumeName : Optional Text
                            }
                      , secret :
                          Optional
                            { defaultMode : Optional Natural
                            , items :
                                Optional
                                  ( List
                                      { key : Text
                                      , mode : Optional Natural
                                      , path : Text
                                      }
                                  )
                            , optional : Optional Bool
                            , secretName : Optional Text
                            }
                      , storageos :
                          Optional
                            { fsType : Optional Text
                            , readOnly : Optional Bool
                            , secretRef : Optional { name : Optional Text }
                            , volumeName : Optional Text
                            , volumeNamespace : Optional Text
                            }
                      , vsphereVolume :
                          Optional
                            { fsType : Optional Text
                            , storagePolicyID : Optional Text
                            , storagePolicyName : Optional Text
                            , volumePath : Text
                            }
                      }
                  )
            }
          }
        }
      , status =
          None
            { availableReplicas : Optional Natural
            , collisionCount : Optional Natural
            , conditions :
                Optional
                  ( List
                      { lastTransitionTime : Optional Text
                      , lastUpdateTime : Optional Text
                      , message : Optional Text
                      , reason : Optional Text
                      , status : Text
                      , type : Text
                      }
                  )
            , observedGeneration : Optional Natural
            , readyReplicas : Optional Natural
            , replicas : Optional Natural
            , unavailableReplicas : Optional Natural
            , updatedReplicas : Optional Natural
            }
      }
    }
  , PersistentVolumeClaim.bundle-manager
    =
    { apiVersion = "v1"
    , kind = "PersistentVolumeClaim"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "precise-code-intel"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "bundle-manager"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { accessModes = Some [ "ReadWriteOnce" ]
      , dataSource = None { apiGroup : Optional Text, kind : Text, name : Text }
      , resources = Some
        { limits = None (List { mapKey : Text, mapValue : Text })
        , requests = Some (toMap { storage = "200Gi" })
        }
      , selector =
          None
            { matchExpressions :
                Optional
                  ( List
                      { key : Text
                      , operator : Text
                      , values : Optional (List Text)
                      }
                  )
            , matchLabels : Optional (List { mapKey : Text, mapValue : Text })
            }
      , storageClassName = Some "sourcegraph"
      , volumeMode = None Text
      , volumeName = None Text
      }
    , status =
        None
          { accessModes : Optional (List Text)
          , capacity : Optional (List { mapKey : Text, mapValue : Text })
          , conditions :
              Optional
                ( List
                    { lastProbeTime : Optional Text
                    , lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , phase : Optional Text
          }
    }
  , Service =
    { precise-code-intel-bundle-manager =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "6060"
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "precise-code-intel-bundle-manager"
                , `app.kubernetes.io/component` = "precise-code-intel"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "precise-code-intel-bundle-manager"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "http"
            , nodePort = None Natural
            , port = 3187
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "http")
            }
          , { appProtocol = None Text
            , name = Some "debug"
            , nodePort = None Natural
            , port = 6060
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "debug")
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "precise-code-intel-bundle-manager" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    , precise-code-intel-worker =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "6060"
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "precise-code-intel-worker"
                , `app.kubernetes.io/component` = "precise-code-intel"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "precise-code-intel-worker"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "http"
            , nodePort = None Natural
            , port = 3188
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "http")
            }
          , { appProtocol = None Text
            , name = Some "debug"
            , nodePort = None Natural
            , port = 6060
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "debug")
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "precise-code-intel-worker" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    }
  }
, Prometheus =
  { ClusterRole.prometheus
    =
    { aggregationRule =
        None
          { clusterRoleSelectors :
              Optional
                ( List
                    { matchExpressions :
                        Optional
                          ( List
                              { key : Text
                              , operator : Text
                              , values : Optional (List Text)
                              }
                          )
                    , matchLabels :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
                )
          }
    , apiVersion = "rbac.authorization.k8s.io/v1"
    , kind = "ClusterRole"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , rules = Some
      [ { apiGroups = Some [ "" ]
        , nonResourceURLs = None (List Text)
        , resourceNames = None (List Text)
        , resources = Some
          [ "endpoints"
          , "namespaces"
          , "nodes"
          , "nodes/metrics"
          , "nodes/proxy"
          , "pods"
          , "services"
          ]
        , verbs = [ "get", "list", "watch" ]
        }
      , { apiGroups = Some [ "" ]
        , nonResourceURLs = None (List Text)
        , resourceNames = None (List Text)
        , resources = Some [ "configmaps" ]
        , verbs = [ "get" ]
        }
      , { apiGroups = None (List Text)
        , nonResourceURLs = Some [ "/metrics" ]
        , resourceNames = None (List Text)
        , resources = None (List Text)
        , verbs = [ "get" ]
        }
      ]
    }
  , ClusterRoleBinding.prometheus
    =
    { apiVersion = "rbac.authorization.k8s.io/v1"
    , kind = "ClusterRoleBinding"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , roleRef =
      { apiGroup = "rbac.authorization.k8s.io"
      , kind = "ClusterRole"
      , name = "prometheus"
      }
    , subjects = Some
      [ { apiGroup = None Text
        , kind = "ServiceAccount"
        , name = "prometheus"
        , namespace = Some "default"
        }
      ]
    }
  , ConfigMap.prometheus
    =
    { apiVersion = "v1"
    , binaryData = None (List { mapKey : Text, mapValue : Text })
    , data = Some
        ( toMap
            { `prometheus.yml` =
                ''
                global:
                  scrape_interval:     30s
                  evaluation_interval: 30s

                alerting:
                  alertmanagers:
                    # Bundled Alertmanager, started by prom-wrapper
                    - static_configs:
                        - targets: ['127.0.0.1:9093']
                      path_prefix: /alertmanager
                    # Uncomment the following to have alerts delivered to additional Alertmanagers discovered
                    # in the cluster. This configuration is not required if you use Sourcegraph's built-in alerting:
                    # https://docs.sourcegraph.com/admin/observability/alerting
                    # - kubernetes_sd_configs:
                    #  - role: endpoints
                    #  relabel_configs:
                    #    - source_labels: [__meta_kubernetes_service_name]
                    #      regex: alertmanager
                    #      action: keep

                rule_files:
                  - '*_rules.yml'
                  - "/sg_config_prometheus/*_rules.yml"
                  - "/sg_prometheus_add_ons/*_rules.yml"

                # A scrape configuration for running Prometheus on a Kubernetes cluster.
                # This uses separate scrape configs for cluster components (i.e. API server, node)
                # and services to allow each to use different authentication configs.
                #
                # Kubernetes labels will be added as Prometheus labels on metrics via the
                # `labelmap` relabeling action.

                # Scrape config for API servers.
                #
                # Kubernetes exposes API servers as endpoints to the default/kubernetes
                # service so this uses `endpoints` role and uses relabelling to only keep
                # the endpoints associated with the default/kubernetes service using the
                # default named port `https`. This works for single API server deployments as
                # well as HA API server deployments.
                scrape_configs:
                - job_name: 'kubernetes-apiservers'

                  kubernetes_sd_configs:
                  - role: endpoints

                  # Default to scraping over https. If required, just disable this or change to
                  # `http`.
                  scheme: https

                  # This TLS & bearer token file config is used to connect to the actual scrape
                  # endpoints for cluster components. This is separate to discovery auth
                  # configuration because discovery & scraping are two separate concerns in
                  # Prometheus. The discovery auth config is automatic if Prometheus runs inside
                  # the cluster. Otherwise, more config options have to be provided within the
                  # <kubernetes_sd_config>.
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    # If your node certificates are self-signed or use a different CA to the
                    # master CA, then disable certificate verification below. Note that
                    # certificate verification is an integral part of a secure infrastructure
                    # so this should only be disabled in a controlled environment. You can
                    # disable certificate verification by uncommenting the line below.
                    #
                    # insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

                  # Keep only the default/kubernetes service endpoints for the https port. This
                  # will add targets for each API server which Kubernetes adds an endpoint to
                  # the default/kubernetes service.
                  relabel_configs:
                  - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                    action: keep
                    regex: default;kubernetes;https

                - job_name: 'kubernetes-nodes'

                  # Default to scraping over https. If required, just disable this or change to
                  # `http`.
                  scheme: https

                  # This TLS & bearer token file config is used to connect to the actual scrape
                  # endpoints for cluster components. This is separate to discovery auth
                  # configuration because discovery & scraping are two separate concerns in
                  # Prometheus. The discovery auth config is automatic if Prometheus runs inside
                  # the cluster. Otherwise, more config options have to be provided within the
                  # <kubernetes_sd_config>.
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    # If your node certificates are self-signed or use a different CA to the
                    # master CA, then disable certificate verification below. Note that
                    # certificate verification is an integral part of a secure infrastructure
                    # so this should only be disabled in a controlled environment. You can
                    # disable certificate verification by uncommenting the line below.
                    #
                    insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

                  kubernetes_sd_configs:
                  - role: node

                  relabel_configs:
                  - action: labelmap
                    regex: __meta_kubernetes_node_label_(.+)
                  - target_label: __address__
                    replacement: kubernetes.default.svc:443
                  - source_labels: [__meta_kubernetes_node_name]
                    regex: (.+)
                    target_label: __metrics_path__
                    replacement: /api/v1/nodes/''${1}/proxy/metrics

                # Scrape config for service endpoints.
                #
                # The relabeling allows the actual service scrape endpoint to be configured
                # via the following annotations:
                #
                # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
                # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
                # to set this to `https` & most likely set the `tls_config` of the scrape config.
                # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
                # * `prometheus.io/port`: If the metrics are exposed on a different port to the
                # service then set this appropriately.
                - job_name: 'kubernetes-service-endpoints'

                  kubernetes_sd_configs:
                  - role: endpoints

                  relabel_configs:
                  - source_labels: [__meta_kubernetes_service_annotation_sourcegraph_prometheus_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_container_name]
                    action: drop
                    regex: jaeger-agent
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                    action: replace
                    target_label: __scheme__
                    regex: (https?)
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                    action: replace
                    target_label: __address__
                    regex: (.+)(?::\d+);(\d+)
                    replacement: $1:$2
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    # Sourcegraph specific customization. We want a more convenient to type label.
                    # target_label: kubernetes_namespace
                    target_label: ns
                  - source_labels: [__meta_kubernetes_service_name]
                    action: replace
                    target_label: kubernetes_name
                  # Sourcegraph specific customization. We want a nicer name for job
                  - source_labels: [app]
                    action: replace
                    target_label: job
                  # Sourcegraph specific customization. We want a nicer name for instance
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: instance

                # Example scrape config for probing services via the Blackbox Exporter.
                #
                # The relabeling allows the actual service scrape endpoint to be configured
                # via the following annotations:
                #
                # * `prometheus.io/probe`: Only probe services that have a value of `true`
                - job_name: 'kubernetes-services'

                  metrics_path: /probe
                  params:
                    module: [http_2xx]

                  kubernetes_sd_configs:
                  - role: service

                  relabel_configs:
                  - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                    action: keep
                    regex: true
                  - source_labels: [__address__]
                    target_label: __param_target
                  - target_label: __address__
                    replacement: blackbox
                  - source_labels: [__param_target]
                    target_label: instance
                  - action: labelmap
                    regex: __meta_kubernetes_service_label_(.+)
                  - source_labels: [__meta_kubernetes_service_namespace]
                    # Sourcegraph specific customization. We want a more convenient to type label.
                    # target_label: kubernetes_namespace
                    target_label: ns
                  - source_labels: [__meta_kubernetes_service_name]
                    target_label: kubernetes_name

                # Example scrape config for pods
                #
                # The relabeling allows the actual pod scrape endpoint to be configured via the
                # following annotations:
                #
                # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`
                # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
                # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.
                - job_name: 'kubernetes-pods'

                  kubernetes_sd_configs:
                  - role: pod

                  relabel_configs:
                  - source_labels: [__meta_kubernetes_pod_annotation_sourcegraph_prometheus_scrape]
                    action: keep
                    regex: true
                  - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                    action: replace
                    target_label: __metrics_path__
                    regex: (.+)
                  - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                    action: replace
                    regex: (.+):(?:\d+);(\d+)
                    replacement: ''${1}:''${2}
                    target_label: __address__
                  - action: labelmap
                    regex: __meta_kubernetes_pod_label_(.+)
                  - source_labels: [__meta_kubernetes_namespace]
                    action: replace
                    # Sourcegraph specific customization. We want a more convenient to type label.
                    # target_label: kubernetes_namespace
                    target_label: ns
                  - source_labels: [__meta_kubernetes_pod_name]
                    action: replace
                    target_label: kubernetes_pod_name

                # Scrape prometheus itself for metrics.
                - job_name: 'builtin-prometheus'
                  static_configs:
                    - targets: ['127.0.0.1:9092']
                      labels:
                        app: prometheus
                - job_name: 'builtin-alertmanager'
                  metrics_path: /alertmanager/metrics
                  static_configs:
                    - targets: ['127.0.0.1:9093']
                      labels:
                        app: alertmanager
                ''
            , `extra_rules.yml` = ""
            }
        )
    , immutable = None Bool
    , kind = "ConfigMap"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    }
  , Deployment.prometheus
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          ( toMap
              { description =
                  "Collects metrics and aggregates them into graphs."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "prometheus" })
        }
      , strategy = Some
        { rollingUpdate =
            None
              { maxSurge : Optional < Int : Natural | String : Text >
              , maxUnavailable : Optional < Int : Natural | String : Text >
              }
        , type = Some "Recreate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some (toMap { app = "prometheus", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/prometheus:insiders@sha256:be2484ab1f5b08d6329ad7489d9fbefc8949141de17cec66dfd6bda5a4efd718"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/-/healthy"
                  , port = < Int : Natural | String : Text >.Int 9090
                  , scheme = None Text
                  }
                , initialDelaySeconds = Some 30
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 30
                }
              , name = "prometheus"
              , ports = Some
                [ { containerPort = 9090
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/-/ready"
                  , port = < Int : Natural | String : Text >.Int 9090
                  , scheme = None Text
                  }
                , initialDelaySeconds = Some 30
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 30
                }
              , resources = Some
                { limits = Some (toMap { memory = "6G", cpu = "2" })
                , requests = Some (toMap { memory = "6G", cpu = "500m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/prometheus"
                  , mountPropagation = None Text
                  , name = "data"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                , { mountPath = "/sg_prometheus_add_ons"
                  , mountPropagation = None Text
                  , name = "config"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = Some "prometheus"
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "data"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim = Some
                { claimName = "prometheus", readOnly = None Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            , { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap = Some
                { defaultMode = Some 511
                , items =
                    None
                      ( List
                          { key : Text, mode : Optional Natural, path : Text }
                      )
                , name = Some "prometheus"
                , optional = None Bool
                }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir =
                  None { medium : Optional Text, sizeLimit : Optional Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "config"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , PersistentVolumeClaim.prometheus
    =
    { apiVersion = "v1"
    , kind = "PersistentVolumeClaim"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { accessModes = Some [ "ReadWriteOnce" ]
      , dataSource = None { apiGroup : Optional Text, kind : Text, name : Text }
      , resources = Some
        { limits = None (List { mapKey : Text, mapValue : Text })
        , requests = Some (toMap { storage = "200Gi" })
        }
      , selector =
          None
            { matchExpressions :
                Optional
                  ( List
                      { key : Text
                      , operator : Text
                      , values : Optional (List Text)
                      }
                  )
            , matchLabels : Optional (List { mapKey : Text, mapValue : Text })
            }
      , storageClassName = Some "sourcegraph"
      , volumeMode = None Text
      , volumeName = None Text
      }
    , status =
        None
          { accessModes : Optional (List Text)
          , capacity : Optional (List { mapKey : Text, mapValue : Text })
          , conditions :
              Optional
                ( List
                    { lastProbeTime : Optional Text
                    , lastTransitionTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , phase : Optional Text
          }
    }
  , Service.prometheus
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "prometheus"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 30090
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "prometheus" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  , ServiceAccount.prometheus
    =
    { apiVersion = "v1"
    , automountServiceAccountToken = None Bool
    , imagePullSecrets = Some [ { name = Some "docker-registry" } ]
    , kind = "ServiceAccount"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , category = "rbac"
              , `app.kubernetes.io/component` = "prometheus"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "prometheus"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , secrets =
        None
          ( List
              { apiVersion : Text
              , fieldPath : Optional Text
              , kind : Text
              , name : Optional Text
              , namespace : Optional Text
              , resourceVersion : Optional Text
              , uid : Optional Text
              }
          )
    }
  }
, Query-Runner =
  { Deployment.query-runner
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          ( toMap
              { description =
                  "Saved search query runner / notification service."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "query-runner"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "query-runner"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "query-runner" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 0)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              (toMap { app = "query-runner", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/query-runner:insiders@sha256:2c2616819140f3956edc04e1b00ca7b6b70ba05a193966e0f9e31c890fe423e6"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "query-runner"
              , ports = Some
                [ { containerPort = 3183
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "1G", cpu = "1" })
                , requests = Some (toMap { memory = "1G", cpu = "500m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes =
              None
                ( List
                    { awsElasticBlockStore :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , azureDisk :
                        Optional
                          { cachingMode : Optional Text
                          , diskName : Text
                          , diskURI : Text
                          , fsType : Optional Text
                          , kind : Text
                          , readOnly : Optional Bool
                          }
                    , azureFile :
                        Optional
                          { readOnly : Optional Bool
                          , secretName : Text
                          , shareName : Text
                          }
                    , cephfs :
                        Optional
                          { monitors : List Text
                          , path : Optional Text
                          , readOnly : Optional Bool
                          , secretFile : Optional Text
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , cinder :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeID : Text
                          }
                    , configMap :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , csi :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , nodePublishSecretRef :
                              Optional { name : Optional Text }
                          , readOnly : Optional Bool
                          , volumeAttributes :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , downwardAPI :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , mode : Optional Natural
                                    , path : Text
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    }
                                )
                          }
                    , emptyDir :
                        Optional
                          { medium : Optional Text, sizeLimit : Optional Text }
                    , fc :
                        Optional
                          { fsType : Optional Text
                          , lun : Optional Natural
                          , readOnly : Optional Bool
                          , targetWWNs : Optional (List Text)
                          , wwids : Optional (List Text)
                          }
                    , flexVolume :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , options :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          }
                    , flocker :
                        Optional
                          { datasetName : Optional Text
                          , datasetUUID : Optional Text
                          }
                    , gcePersistentDisk :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , pdName : Text
                          , readOnly : Optional Bool
                          }
                    , gitRepo :
                        Optional
                          { directory : Optional Text
                          , repository : Text
                          , revision : Optional Text
                          }
                    , glusterfs :
                        Optional
                          { endpoints : Text
                          , path : Text
                          , readOnly : Optional Bool
                          }
                    , hostPath : Optional { path : Text, type : Optional Text }
                    , iscsi :
                        Optional
                          { chapAuthDiscovery : Optional Bool
                          , chapAuthSession : Optional Bool
                          , fsType : Optional Text
                          , initiatorName : Optional Text
                          , iqn : Text
                          , iscsiInterface : Optional Text
                          , lun : Natural
                          , portals : Optional (List Text)
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , targetPortal : Text
                          }
                    , name : Text
                    , nfs :
                        Optional
                          { path : Text
                          , readOnly : Optional Bool
                          , server : Text
                          }
                    , persistentVolumeClaim :
                        Optional { claimName : Text, readOnly : Optional Bool }
                    , photonPersistentDisk :
                        Optional { fsType : Optional Text, pdID : Text }
                    , portworxVolume :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , projected :
                        Optional
                          { defaultMode : Optional Natural
                          , sources :
                              List
                                { configMap :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , downwardAPI :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { fieldRef :
                                                    Optional
                                                      { apiVersion :
                                                          Optional Text
                                                      , fieldPath : Text
                                                      }
                                                , mode : Optional Natural
                                                , path : Text
                                                , resourceFieldRef :
                                                    Optional
                                                      { containerName :
                                                          Optional Text
                                                      , divisor : Optional Text
                                                      , resource : Text
                                                      }
                                                }
                                            )
                                      }
                                , secret :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , serviceAccountToken :
                                    Optional
                                      { audience : Optional Text
                                      , expirationSeconds : Optional Natural
                                      , path : Text
                                      }
                                }
                          }
                    , quobyte :
                        Optional
                          { group : Optional Text
                          , readOnly : Optional Bool
                          , registry : Text
                          , tenant : Optional Text
                          , user : Optional Text
                          , volume : Text
                          }
                    , rbd :
                        Optional
                          { fsType : Optional Text
                          , image : Text
                          , keyring : Optional Text
                          , monitors : List Text
                          , pool : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , scaleIO :
                        Optional
                          { fsType : Optional Text
                          , gateway : Text
                          , protectionDomain : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : { name : Optional Text }
                          , sslEnabled : Optional Bool
                          , storageMode : Optional Text
                          , storagePool : Optional Text
                          , system : Text
                          , volumeName : Optional Text
                          }
                    , secret :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , optional : Optional Bool
                          , secretName : Optional Text
                          }
                    , storageos :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeName : Optional Text
                          , volumeNamespace : Optional Text
                          }
                    , vsphereVolume :
                        Optional
                          { fsType : Optional Text
                          , storagePolicyID : Optional Text
                          , storagePolicyName : Optional Text
                          , volumePath : Text
                          }
                    }
                )
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service.query-runner
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "6060"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "query-runner"
              , `app.kubernetes.io/component` = "query-runner"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "query-runner"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 80
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "query-runner" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Redis =
  { Deployment =
    { redis-cache =
      { apiVersion = "apps/v1"
      , kind = "Deployment"
      , metadata =
        { annotations = Some
            (toMap { description = "Redis for storing short-lived caches." })
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , `app.kubernetes.io/component` = "redis"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "redis-cache"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { minReadySeconds = Some 10
        , paused = None Bool
        , progressDeadlineSeconds = None Natural
        , replicas = Some 1
        , revisionHistoryLimit = Some 10
        , selector =
          { matchExpressions =
              None
                ( List
                    { key : Text
                    , operator : Text
                    , values : Optional (List Text)
                    }
                )
          , matchLabels = Some (toMap { app = "redis-cache" })
          }
        , strategy = Some
          { rollingUpdate =
              None
                { maxSurge : Optional < Int : Natural | String : Text >
                , maxUnavailable : Optional < Int : Natural | String : Text >
                }
          , type = Some "Recreate"
          }
        , template =
          { metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = Some
                (toMap { app = "redis-cache", deploy = "sourcegraph" })
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = None Text
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { activeDeadlineSeconds = None Natural
            , affinity =
                None
                  { nodeAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { preference :
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchFields :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              { nodeSelectorTerms :
                                  List
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                              }
                        }
                  , podAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  , podAntiAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  }
            , automountServiceAccountToken = None Bool
            , containers =
              [ { args = None (List Text)
                , command = None (List Text)
                , env =
                    None
                      ( List
                          { name : Text
                          , value : Optional Text
                          , valueFrom :
                              Optional
                                { configMapKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                , secretKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                          }
                      )
                , envFrom =
                    None
                      ( List
                          { configMapRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          , prefix : Optional Text
                          , secretRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                      )
                , image = Some
                    "index.docker.io/sourcegraph/redis-cache:insiders@sha256:7820219195ab3e8fdae5875cd690fed1b2a01fd1063bd94210c0e9d529c38e56"
                , imagePullPolicy = None Text
                , lifecycle =
                    None
                      { postStart :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      , preStop :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      }
                , livenessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet =
                      None
                        { host : Optional Text
                        , httpHeaders :
                            Optional (List { name : Text, value : Text })
                        , path : Optional Text
                        , port : < Int : Natural | String : Text >
                        , scheme : Optional Text
                        }
                  , initialDelaySeconds = Some 30
                  , periodSeconds = None Natural
                  , successThreshold = None Natural
                  , tcpSocket = Some
                    { host = None Text
                    , port = < Int : Natural | String : Text >.String "redis"
                    }
                  , timeoutSeconds = None Natural
                  }
                , name = "redis-cache"
                , ports = Some
                  [ { containerPort = 6379
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "redis"
                    , protocol = None Text
                    }
                  ]
                , readinessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet =
                      None
                        { host : Optional Text
                        , httpHeaders :
                            Optional (List { name : Text, value : Text })
                        , path : Optional Text
                        , port : < Int : Natural | String : Text >
                        , scheme : Optional Text
                        }
                  , initialDelaySeconds = Some 5
                  , periodSeconds = None Natural
                  , successThreshold = None Natural
                  , tcpSocket = Some
                    { host = None Text
                    , port = < Int : Natural | String : Text >.String "redis"
                    }
                  , timeoutSeconds = None Natural
                  }
                , resources = Some
                  { limits = Some (toMap { memory = "6Gi", cpu = "1" })
                  , requests = Some (toMap { memory = "6Gi", cpu = "1" })
                  }
                , securityContext =
                    None
                      { allowPrivilegeEscalation : Optional Bool
                      , capabilities :
                          Optional
                            { add : Optional (List Text)
                            , drop : Optional (List Text)
                            }
                      , privileged : Optional Bool
                      , procMount : Optional Text
                      , readOnlyRootFilesystem : Optional Bool
                      , runAsGroup : Optional Natural
                      , runAsNonRoot : Optional Bool
                      , runAsUser : Optional Natural
                      , seLinuxOptions :
                          Optional
                            { level : Optional Text
                            , role : Optional Text
                            , type : Optional Text
                            , user : Optional Text
                            }
                      , windowsOptions :
                          Optional
                            { gmsaCredentialSpec : Optional Text
                            , gmsaCredentialSpecName : Optional Text
                            , runAsUserName : Optional Text
                            }
                      }
                , startupProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , stdin = None Bool
                , stdinOnce = None Bool
                , terminationMessagePath = None Text
                , terminationMessagePolicy = Some "FallbackToLogsOnError"
                , tty = None Bool
                , volumeDevices = None (List { devicePath : Text, name : Text })
                , volumeMounts = Some
                  [ { mountPath = "/redis-data"
                    , mountPropagation = None Text
                    , name = "redis-data"
                    , readOnly = None Bool
                    , subPath = None Text
                    , subPathExpr = None Text
                    }
                  ]
                , workingDir = None Text
                }
              , { args = None (List Text)
                , command = None (List Text)
                , env =
                    None
                      ( List
                          { name : Text
                          , value : Optional Text
                          , valueFrom :
                              Optional
                                { configMapKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                , secretKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                          }
                      )
                , envFrom =
                    None
                      ( List
                          { configMapRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          , prefix : Optional Text
                          , secretRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                      )
                , image = Some
                    "index.docker.io/sourcegraph/redis_exporter:18-02-07_bb60087_v0.15.0@sha256:282d59b2692cca68da128a4e28d368ced3d17945cd1d273d3ee7ba719d77b753"
                , imagePullPolicy = None Text
                , lifecycle =
                    None
                      { postStart :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      , preStop :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      }
                , livenessProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , name = "redis-exporter"
                , ports = Some
                  [ { containerPort = 9121
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "redisexp"
                    , protocol = None Text
                    }
                  ]
                , readinessProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , resources = Some
                  { limits = Some (toMap { memory = "100Mi", cpu = "10m" })
                  , requests = Some (toMap { memory = "100Mi", cpu = "10m" })
                  }
                , securityContext =
                    None
                      { allowPrivilegeEscalation : Optional Bool
                      , capabilities :
                          Optional
                            { add : Optional (List Text)
                            , drop : Optional (List Text)
                            }
                      , privileged : Optional Bool
                      , procMount : Optional Text
                      , readOnlyRootFilesystem : Optional Bool
                      , runAsGroup : Optional Natural
                      , runAsNonRoot : Optional Bool
                      , runAsUser : Optional Natural
                      , seLinuxOptions :
                          Optional
                            { level : Optional Text
                            , role : Optional Text
                            , type : Optional Text
                            , user : Optional Text
                            }
                      , windowsOptions :
                          Optional
                            { gmsaCredentialSpec : Optional Text
                            , gmsaCredentialSpecName : Optional Text
                            , runAsUserName : Optional Text
                            }
                      }
                , startupProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , stdin = None Bool
                , stdinOnce = None Bool
                , terminationMessagePath = None Text
                , terminationMessagePolicy = Some "FallbackToLogsOnError"
                , tty = None Bool
                , volumeDevices = None (List { devicePath : Text, name : Text })
                , volumeMounts =
                    None
                      ( List
                          { mountPath : Text
                          , mountPropagation : Optional Text
                          , name : Text
                          , readOnly : Optional Bool
                          , subPath : Optional Text
                          , subPathExpr : Optional Text
                          }
                      )
                , workingDir = None Text
                }
              ]
            , dnsConfig =
                None
                  { nameservers : Optional (List Text)
                  , options :
                      Optional
                        (List { name : Optional Text, value : Optional Text })
                  , searches : Optional (List Text)
                  }
            , dnsPolicy = None Text
            , enableServiceLinks = None Bool
            , ephemeralContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , targetContainerName : Optional Text
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , hostAliases =
                None
                  ( List
                      { hostnames : Optional (List Text), ip : Optional Text }
                  )
            , hostIPC = None Bool
            , hostNetwork = None Bool
            , hostPID = None Bool
            , hostname = None Text
            , imagePullSecrets = None (List { name : Optional Text })
            , initContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , nodeName = None Text
            , nodeSelector = None (List { mapKey : Text, mapValue : Text })
            , overhead = None (List { mapKey : Text, mapValue : Text })
            , preemptionPolicy = None Text
            , priority = None Natural
            , priorityClassName = None Text
            , readinessGates = None (List { conditionType : Text })
            , restartPolicy = None Text
            , runtimeClassName = None Text
            , schedulerName = None Text
            , securityContext = Some
              { fsGroup = None Natural
              , fsGroupChangePolicy = None Text
              , runAsGroup = None Natural
              , runAsNonRoot = None Bool
              , runAsUser = Some 0
              , seLinuxOptions =
                  None
                    { level : Optional Text
                    , role : Optional Text
                    , type : Optional Text
                    , user : Optional Text
                    }
              , supplementalGroups = None (List Natural)
              , sysctls = None (List { name : Text, value : Text })
              , windowsOptions =
                  None
                    { gmsaCredentialSpec : Optional Text
                    , gmsaCredentialSpecName : Optional Text
                    , runAsUserName : Optional Text
                    }
              }
            , serviceAccount = None Text
            , serviceAccountName = None Text
            , shareProcessNamespace = None Bool
            , subdomain = None Text
            , terminationGracePeriodSeconds = None Natural
            , tolerations =
                None
                  ( List
                      { effect : Optional Text
                      , key : Optional Text
                      , operator : Optional Text
                      , tolerationSeconds : Optional Natural
                      , value : Optional Text
                      }
                  )
            , topologySpreadConstraints =
                None
                  ( List
                      { labelSelector :
                          Optional
                            { matchExpressions :
                                Optional
                                  ( List
                                      { key : Text
                                      , operator : Text
                                      , values : Optional (List Text)
                                      }
                                  )
                            , matchLabels :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , maxSkew : Natural
                      , topologyKey : Text
                      , whenUnsatisfiable : Text
                      }
                  )
            , volumes = Some
              [ { awsElasticBlockStore =
                    None
                      { fsType : Optional Text
                      , partition : Optional Natural
                      , readOnly : Optional Bool
                      , volumeID : Text
                      }
                , azureDisk =
                    None
                      { cachingMode : Optional Text
                      , diskName : Text
                      , diskURI : Text
                      , fsType : Optional Text
                      , kind : Text
                      , readOnly : Optional Bool
                      }
                , azureFile =
                    None
                      { readOnly : Optional Bool
                      , secretName : Text
                      , shareName : Text
                      }
                , cephfs =
                    None
                      { monitors : List Text
                      , path : Optional Text
                      , readOnly : Optional Bool
                      , secretFile : Optional Text
                      , secretRef : Optional { name : Optional Text }
                      , user : Optional Text
                      }
                , cinder =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , volumeID : Text
                      }
                , configMap =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { key : Text
                                , mode : Optional Natural
                                , path : Text
                                }
                            )
                      , name : Optional Text
                      , optional : Optional Bool
                      }
                , csi =
                    None
                      { driver : Text
                      , fsType : Optional Text
                      , nodePublishSecretRef : Optional { name : Optional Text }
                      , readOnly : Optional Bool
                      , volumeAttributes :
                          Optional (List { mapKey : Text, mapValue : Text })
                      }
                , downwardAPI =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , mode : Optional Natural
                                , path : Text
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                }
                            )
                      }
                , emptyDir =
                    None { medium : Optional Text, sizeLimit : Optional Text }
                , fc =
                    None
                      { fsType : Optional Text
                      , lun : Optional Natural
                      , readOnly : Optional Bool
                      , targetWWNs : Optional (List Text)
                      , wwids : Optional (List Text)
                      }
                , flexVolume =
                    None
                      { driver : Text
                      , fsType : Optional Text
                      , options :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      }
                , flocker =
                    None
                      { datasetName : Optional Text
                      , datasetUUID : Optional Text
                      }
                , gcePersistentDisk =
                    None
                      { fsType : Optional Text
                      , partition : Optional Natural
                      , pdName : Text
                      , readOnly : Optional Bool
                      }
                , gitRepo =
                    None
                      { directory : Optional Text
                      , repository : Text
                      , revision : Optional Text
                      }
                , glusterfs =
                    None
                      { endpoints : Text
                      , path : Text
                      , readOnly : Optional Bool
                      }
                , hostPath = None { path : Text, type : Optional Text }
                , iscsi =
                    None
                      { chapAuthDiscovery : Optional Bool
                      , chapAuthSession : Optional Bool
                      , fsType : Optional Text
                      , initiatorName : Optional Text
                      , iqn : Text
                      , iscsiInterface : Optional Text
                      , lun : Natural
                      , portals : Optional (List Text)
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , targetPortal : Text
                      }
                , name = "redis-data"
                , nfs =
                    None
                      { path : Text, readOnly : Optional Bool, server : Text }
                , persistentVolumeClaim = Some
                  { claimName = "redis-cache", readOnly = None Bool }
                , photonPersistentDisk =
                    None { fsType : Optional Text, pdID : Text }
                , portworxVolume =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , volumeID : Text
                      }
                , projected =
                    None
                      { defaultMode : Optional Natural
                      , sources :
                          List
                            { configMap :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { key : Text
                                            , mode : Optional Natural
                                            , path : Text
                                            }
                                        )
                                  , name : Optional Text
                                  , optional : Optional Bool
                                  }
                            , downwardAPI :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { fieldRef :
                                                Optional
                                                  { apiVersion : Optional Text
                                                  , fieldPath : Text
                                                  }
                                            , mode : Optional Natural
                                            , path : Text
                                            , resourceFieldRef :
                                                Optional
                                                  { containerName :
                                                      Optional Text
                                                  , divisor : Optional Text
                                                  , resource : Text
                                                  }
                                            }
                                        )
                                  }
                            , secret :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { key : Text
                                            , mode : Optional Natural
                                            , path : Text
                                            }
                                        )
                                  , name : Optional Text
                                  , optional : Optional Bool
                                  }
                            , serviceAccountToken :
                                Optional
                                  { audience : Optional Text
                                  , expirationSeconds : Optional Natural
                                  , path : Text
                                  }
                            }
                      }
                , quobyte =
                    None
                      { group : Optional Text
                      , readOnly : Optional Bool
                      , registry : Text
                      , tenant : Optional Text
                      , user : Optional Text
                      , volume : Text
                      }
                , rbd =
                    None
                      { fsType : Optional Text
                      , image : Text
                      , keyring : Optional Text
                      , monitors : List Text
                      , pool : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , user : Optional Text
                      }
                , scaleIO =
                    None
                      { fsType : Optional Text
                      , gateway : Text
                      , protectionDomain : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : { name : Optional Text }
                      , sslEnabled : Optional Bool
                      , storageMode : Optional Text
                      , storagePool : Optional Text
                      , system : Text
                      , volumeName : Optional Text
                      }
                , secret =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { key : Text
                                , mode : Optional Natural
                                , path : Text
                                }
                            )
                      , optional : Optional Bool
                      , secretName : Optional Text
                      }
                , storageos =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , volumeName : Optional Text
                      , volumeNamespace : Optional Text
                      }
                , vsphereVolume =
                    None
                      { fsType : Optional Text
                      , storagePolicyID : Optional Text
                      , storagePolicyName : Optional Text
                      , volumePath : Text
                      }
                }
              ]
            }
          }
        }
      , status =
          None
            { availableReplicas : Optional Natural
            , collisionCount : Optional Natural
            , conditions :
                Optional
                  ( List
                      { lastTransitionTime : Optional Text
                      , lastUpdateTime : Optional Text
                      , message : Optional Text
                      , reason : Optional Text
                      , status : Text
                      , type : Text
                      }
                  )
            , observedGeneration : Optional Natural
            , readyReplicas : Optional Natural
            , replicas : Optional Natural
            , unavailableReplicas : Optional Natural
            , updatedReplicas : Optional Natural
            }
      }
    , redis-store =
      { apiVersion = "apps/v1"
      , kind = "Deployment"
      , metadata =
        { annotations = Some
            ( toMap
                { description =
                    "Redis for storing semi-persistent data like user sessions."
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , `app.kubernetes.io/component` = "redis"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "redis-store"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { minReadySeconds = Some 10
        , paused = None Bool
        , progressDeadlineSeconds = None Natural
        , replicas = Some 1
        , revisionHistoryLimit = Some 10
        , selector =
          { matchExpressions =
              None
                ( List
                    { key : Text
                    , operator : Text
                    , values : Optional (List Text)
                    }
                )
          , matchLabels = Some (toMap { app = "redis-store" })
          }
        , strategy = Some
          { rollingUpdate =
              None
                { maxSurge : Optional < Int : Natural | String : Text >
                , maxUnavailable : Optional < Int : Natural | String : Text >
                }
          , type = Some "Recreate"
          }
        , template =
          { metadata =
            { annotations = None (List { mapKey : Text, mapValue : Text })
            , clusterName = None Text
            , creationTimestamp = None Text
            , deletionGracePeriodSeconds = None Natural
            , deletionTimestamp = None Text
            , finalizers = None (List Text)
            , generateName = None Text
            , generation = None Natural
            , labels = Some
                (toMap { app = "redis-store", deploy = "sourcegraph" })
            , managedFields =
                None
                  ( List
                      { apiVersion : Text
                      , fieldsType : Optional Text
                      , fieldsV1 :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , manager : Optional Text
                      , operation : Optional Text
                      , time : Optional Text
                      }
                  )
            , name = None Text
            , namespace = None Text
            , ownerReferences =
                None
                  ( List
                      { apiVersion : Text
                      , blockOwnerDeletion : Optional Bool
                      , controller : Optional Bool
                      , kind : Text
                      , name : Text
                      , uid : Text
                      }
                  )
            , resourceVersion = None Text
            , selfLink = None Text
            , uid = None Text
            }
          , spec = Some
            { activeDeadlineSeconds = None Natural
            , affinity =
                None
                  { nodeAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { preference :
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchFields :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              { nodeSelectorTerms :
                                  List
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                              }
                        }
                  , podAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  , podAntiAffinity :
                      Optional
                        { preferredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { podAffinityTerm :
                                      { labelSelector :
                                          Optional
                                            { matchExpressions :
                                                Optional
                                                  ( List
                                                      { key : Text
                                                      , operator : Text
                                                      , values :
                                                          Optional (List Text)
                                                      }
                                                  )
                                            , matchLabels :
                                                Optional
                                                  ( List
                                                      { mapKey : Text
                                                      , mapValue : Text
                                                      }
                                                  )
                                            }
                                      , namespaces : Optional (List Text)
                                      , topologyKey : Text
                                      }
                                  , weight : Natural
                                  }
                              )
                        , requiredDuringSchedulingIgnoredDuringExecution :
                            Optional
                              ( List
                                  { labelSelector :
                                      Optional
                                        { matchExpressions :
                                            Optional
                                              ( List
                                                  { key : Text
                                                  , operator : Text
                                                  , values :
                                                      Optional (List Text)
                                                  }
                                              )
                                        , matchLabels :
                                            Optional
                                              ( List
                                                  { mapKey : Text
                                                  , mapValue : Text
                                                  }
                                              )
                                        }
                                  , namespaces : Optional (List Text)
                                  , topologyKey : Text
                                  }
                              )
                        }
                  }
            , automountServiceAccountToken = None Bool
            , containers =
              [ { args = None (List Text)
                , command = None (List Text)
                , env =
                    None
                      ( List
                          { name : Text
                          , value : Optional Text
                          , valueFrom :
                              Optional
                                { configMapKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                , secretKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                          }
                      )
                , envFrom =
                    None
                      ( List
                          { configMapRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          , prefix : Optional Text
                          , secretRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                      )
                , image = Some
                    "index.docker.io/sourcegraph/redis-store:insiders@sha256:e8467a8279832207559bdfbc4a89b68916ecd5b44ab5cf7620c995461c005168"
                , imagePullPolicy = None Text
                , lifecycle =
                    None
                      { postStart :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      , preStop :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      }
                , livenessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet =
                      None
                        { host : Optional Text
                        , httpHeaders :
                            Optional (List { name : Text, value : Text })
                        , path : Optional Text
                        , port : < Int : Natural | String : Text >
                        , scheme : Optional Text
                        }
                  , initialDelaySeconds = Some 30
                  , periodSeconds = None Natural
                  , successThreshold = None Natural
                  , tcpSocket = Some
                    { host = None Text
                    , port = < Int : Natural | String : Text >.String "redis"
                    }
                  , timeoutSeconds = None Natural
                  }
                , name = "redis-store"
                , ports = Some
                  [ { containerPort = 6379
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "redis"
                    , protocol = None Text
                    }
                  ]
                , readinessProbe = Some
                  { exec = None { command : Optional (List Text) }
                  , failureThreshold = None Natural
                  , httpGet =
                      None
                        { host : Optional Text
                        , httpHeaders :
                            Optional (List { name : Text, value : Text })
                        , path : Optional Text
                        , port : < Int : Natural | String : Text >
                        , scheme : Optional Text
                        }
                  , initialDelaySeconds = Some 5
                  , periodSeconds = None Natural
                  , successThreshold = None Natural
                  , tcpSocket = Some
                    { host = None Text
                    , port = < Int : Natural | String : Text >.String "redis"
                    }
                  , timeoutSeconds = None Natural
                  }
                , resources = Some
                  { limits = Some (toMap { memory = "6Gi", cpu = "1" })
                  , requests = Some (toMap { memory = "6Gi", cpu = "1" })
                  }
                , securityContext =
                    None
                      { allowPrivilegeEscalation : Optional Bool
                      , capabilities :
                          Optional
                            { add : Optional (List Text)
                            , drop : Optional (List Text)
                            }
                      , privileged : Optional Bool
                      , procMount : Optional Text
                      , readOnlyRootFilesystem : Optional Bool
                      , runAsGroup : Optional Natural
                      , runAsNonRoot : Optional Bool
                      , runAsUser : Optional Natural
                      , seLinuxOptions :
                          Optional
                            { level : Optional Text
                            , role : Optional Text
                            , type : Optional Text
                            , user : Optional Text
                            }
                      , windowsOptions :
                          Optional
                            { gmsaCredentialSpec : Optional Text
                            , gmsaCredentialSpecName : Optional Text
                            , runAsUserName : Optional Text
                            }
                      }
                , startupProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , stdin = None Bool
                , stdinOnce = None Bool
                , terminationMessagePath = None Text
                , terminationMessagePolicy = Some "FallbackToLogsOnError"
                , tty = None Bool
                , volumeDevices = None (List { devicePath : Text, name : Text })
                , volumeMounts = Some
                  [ { mountPath = "/redis-data"
                    , mountPropagation = None Text
                    , name = "redis-data"
                    , readOnly = None Bool
                    , subPath = None Text
                    , subPathExpr = None Text
                    }
                  ]
                , workingDir = None Text
                }
              , { args = None (List Text)
                , command = None (List Text)
                , env =
                    None
                      ( List
                          { name : Text
                          , value : Optional Text
                          , valueFrom :
                              Optional
                                { configMapKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                , secretKeyRef :
                                    Optional
                                      { key : Text
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                          }
                      )
                , envFrom =
                    None
                      ( List
                          { configMapRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          , prefix : Optional Text
                          , secretRef :
                              Optional
                                { name : Optional Text
                                , optional : Optional Bool
                                }
                          }
                      )
                , image = Some
                    "index.docker.io/sourcegraph/redis_exporter:18-02-07_bb60087_v0.15.0@sha256:282d59b2692cca68da128a4e28d368ced3d17945cd1d273d3ee7ba719d77b753"
                , imagePullPolicy = None Text
                , lifecycle =
                    None
                      { postStart :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      , preStop :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            }
                      }
                , livenessProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , name = "redis-exporter"
                , ports = Some
                  [ { containerPort = 9121
                    , hostIP = None Text
                    , hostPort = None Natural
                    , name = Some "redisexp"
                    , protocol = None Text
                    }
                  ]
                , readinessProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , resources = Some
                  { limits = Some (toMap { memory = "100Mi", cpu = "10m" })
                  , requests = Some (toMap { memory = "100Mi", cpu = "10m" })
                  }
                , securityContext =
                    None
                      { allowPrivilegeEscalation : Optional Bool
                      , capabilities :
                          Optional
                            { add : Optional (List Text)
                            , drop : Optional (List Text)
                            }
                      , privileged : Optional Bool
                      , procMount : Optional Text
                      , readOnlyRootFilesystem : Optional Bool
                      , runAsGroup : Optional Natural
                      , runAsNonRoot : Optional Bool
                      , runAsUser : Optional Natural
                      , seLinuxOptions :
                          Optional
                            { level : Optional Text
                            , role : Optional Text
                            , type : Optional Text
                            , user : Optional Text
                            }
                      , windowsOptions :
                          Optional
                            { gmsaCredentialSpec : Optional Text
                            , gmsaCredentialSpecName : Optional Text
                            , runAsUserName : Optional Text
                            }
                      }
                , startupProbe =
                    None
                      { exec : Optional { command : Optional (List Text) }
                      , failureThreshold : Optional Natural
                      , httpGet :
                          Optional
                            { host : Optional Text
                            , httpHeaders :
                                Optional (List { name : Text, value : Text })
                            , path : Optional Text
                            , port : < Int : Natural | String : Text >
                            , scheme : Optional Text
                            }
                      , initialDelaySeconds : Optional Natural
                      , periodSeconds : Optional Natural
                      , successThreshold : Optional Natural
                      , tcpSocket :
                          Optional
                            { host : Optional Text
                            , port : < Int : Natural | String : Text >
                            }
                      , timeoutSeconds : Optional Natural
                      }
                , stdin = None Bool
                , stdinOnce = None Bool
                , terminationMessagePath = None Text
                , terminationMessagePolicy = Some "FallbackToLogsOnError"
                , tty = None Bool
                , volumeDevices = None (List { devicePath : Text, name : Text })
                , volumeMounts =
                    None
                      ( List
                          { mountPath : Text
                          , mountPropagation : Optional Text
                          , name : Text
                          , readOnly : Optional Bool
                          , subPath : Optional Text
                          , subPathExpr : Optional Text
                          }
                      )
                , workingDir = None Text
                }
              ]
            , dnsConfig =
                None
                  { nameservers : Optional (List Text)
                  , options :
                      Optional
                        (List { name : Optional Text, value : Optional Text })
                  , searches : Optional (List Text)
                  }
            , dnsPolicy = None Text
            , enableServiceLinks = None Bool
            , ephemeralContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , targetContainerName : Optional Text
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , hostAliases =
                None
                  ( List
                      { hostnames : Optional (List Text), ip : Optional Text }
                  )
            , hostIPC = None Bool
            , hostNetwork = None Bool
            , hostPID = None Bool
            , hostname = None Text
            , imagePullSecrets = None (List { name : Optional Text })
            , initContainers =
                None
                  ( List
                      { args : Optional (List Text)
                      , command : Optional (List Text)
                      , env :
                          Optional
                            ( List
                                { name : Text
                                , value : Optional Text
                                , valueFrom :
                                    Optional
                                      { configMapKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      , fieldRef :
                                          Optional
                                            { apiVersion : Optional Text
                                            , fieldPath : Text
                                            }
                                      , resourceFieldRef :
                                          Optional
                                            { containerName : Optional Text
                                            , divisor : Optional Text
                                            , resource : Text
                                            }
                                      , secretKeyRef :
                                          Optional
                                            { key : Text
                                            , name : Optional Text
                                            , optional : Optional Bool
                                            }
                                      }
                                }
                            )
                      , envFrom :
                          Optional
                            ( List
                                { configMapRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , prefix : Optional Text
                                , secretRef :
                                    Optional
                                      { name : Optional Text
                                      , optional : Optional Bool
                                      }
                                }
                            )
                      , image : Optional Text
                      , imagePullPolicy : Optional Text
                      , lifecycle :
                          Optional
                            { postStart :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            , preStop :
                                Optional
                                  { exec :
                                      Optional
                                        { command : Optional (List Text) }
                                  , httpGet :
                                      Optional
                                        { host : Optional Text
                                        , httpHeaders :
                                            Optional
                                              ( List
                                                  { name : Text, value : Text }
                                              )
                                        , path : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        , scheme : Optional Text
                                        }
                                  , tcpSocket :
                                      Optional
                                        { host : Optional Text
                                        , port :
                                            < Int : Natural | String : Text >
                                        }
                                  }
                            }
                      , livenessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , name : Text
                      , ports :
                          Optional
                            ( List
                                { containerPort : Natural
                                , hostIP : Optional Text
                                , hostPort : Optional Natural
                                , name : Optional Text
                                , protocol : Optional Text
                                }
                            )
                      , readinessProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , resources :
                          Optional
                            { limits :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            , requests :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , securityContext :
                          Optional
                            { allowPrivilegeEscalation : Optional Bool
                            , capabilities :
                                Optional
                                  { add : Optional (List Text)
                                  , drop : Optional (List Text)
                                  }
                            , privileged : Optional Bool
                            , procMount : Optional Text
                            , readOnlyRootFilesystem : Optional Bool
                            , runAsGroup : Optional Natural
                            , runAsNonRoot : Optional Bool
                            , runAsUser : Optional Natural
                            , seLinuxOptions :
                                Optional
                                  { level : Optional Text
                                  , role : Optional Text
                                  , type : Optional Text
                                  , user : Optional Text
                                  }
                            , windowsOptions :
                                Optional
                                  { gmsaCredentialSpec : Optional Text
                                  , gmsaCredentialSpecName : Optional Text
                                  , runAsUserName : Optional Text
                                  }
                            }
                      , startupProbe :
                          Optional
                            { exec : Optional { command : Optional (List Text) }
                            , failureThreshold : Optional Natural
                            , httpGet :
                                Optional
                                  { host : Optional Text
                                  , httpHeaders :
                                      Optional
                                        (List { name : Text, value : Text })
                                  , path : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  , scheme : Optional Text
                                  }
                            , initialDelaySeconds : Optional Natural
                            , periodSeconds : Optional Natural
                            , successThreshold : Optional Natural
                            , tcpSocket :
                                Optional
                                  { host : Optional Text
                                  , port : < Int : Natural | String : Text >
                                  }
                            , timeoutSeconds : Optional Natural
                            }
                      , stdin : Optional Bool
                      , stdinOnce : Optional Bool
                      , terminationMessagePath : Optional Text
                      , terminationMessagePolicy : Optional Text
                      , tty : Optional Bool
                      , volumeDevices :
                          Optional (List { devicePath : Text, name : Text })
                      , volumeMounts :
                          Optional
                            ( List
                                { mountPath : Text
                                , mountPropagation : Optional Text
                                , name : Text
                                , readOnly : Optional Bool
                                , subPath : Optional Text
                                , subPathExpr : Optional Text
                                }
                            )
                      , workingDir : Optional Text
                      }
                  )
            , nodeName = None Text
            , nodeSelector = None (List { mapKey : Text, mapValue : Text })
            , overhead = None (List { mapKey : Text, mapValue : Text })
            , preemptionPolicy = None Text
            , priority = None Natural
            , priorityClassName = None Text
            , readinessGates = None (List { conditionType : Text })
            , restartPolicy = None Text
            , runtimeClassName = None Text
            , schedulerName = None Text
            , securityContext = Some
              { fsGroup = None Natural
              , fsGroupChangePolicy = None Text
              , runAsGroup = None Natural
              , runAsNonRoot = None Bool
              , runAsUser = Some 0
              , seLinuxOptions =
                  None
                    { level : Optional Text
                    , role : Optional Text
                    , type : Optional Text
                    , user : Optional Text
                    }
              , supplementalGroups = None (List Natural)
              , sysctls = None (List { name : Text, value : Text })
              , windowsOptions =
                  None
                    { gmsaCredentialSpec : Optional Text
                    , gmsaCredentialSpecName : Optional Text
                    , runAsUserName : Optional Text
                    }
              }
            , serviceAccount = None Text
            , serviceAccountName = None Text
            , shareProcessNamespace = None Bool
            , subdomain = None Text
            , terminationGracePeriodSeconds = None Natural
            , tolerations =
                None
                  ( List
                      { effect : Optional Text
                      , key : Optional Text
                      , operator : Optional Text
                      , tolerationSeconds : Optional Natural
                      , value : Optional Text
                      }
                  )
            , topologySpreadConstraints =
                None
                  ( List
                      { labelSelector :
                          Optional
                            { matchExpressions :
                                Optional
                                  ( List
                                      { key : Text
                                      , operator : Text
                                      , values : Optional (List Text)
                                      }
                                  )
                            , matchLabels :
                                Optional
                                  (List { mapKey : Text, mapValue : Text })
                            }
                      , maxSkew : Natural
                      , topologyKey : Text
                      , whenUnsatisfiable : Text
                      }
                  )
            , volumes = Some
              [ { awsElasticBlockStore =
                    None
                      { fsType : Optional Text
                      , partition : Optional Natural
                      , readOnly : Optional Bool
                      , volumeID : Text
                      }
                , azureDisk =
                    None
                      { cachingMode : Optional Text
                      , diskName : Text
                      , diskURI : Text
                      , fsType : Optional Text
                      , kind : Text
                      , readOnly : Optional Bool
                      }
                , azureFile =
                    None
                      { readOnly : Optional Bool
                      , secretName : Text
                      , shareName : Text
                      }
                , cephfs =
                    None
                      { monitors : List Text
                      , path : Optional Text
                      , readOnly : Optional Bool
                      , secretFile : Optional Text
                      , secretRef : Optional { name : Optional Text }
                      , user : Optional Text
                      }
                , cinder =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , volumeID : Text
                      }
                , configMap =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { key : Text
                                , mode : Optional Natural
                                , path : Text
                                }
                            )
                      , name : Optional Text
                      , optional : Optional Bool
                      }
                , csi =
                    None
                      { driver : Text
                      , fsType : Optional Text
                      , nodePublishSecretRef : Optional { name : Optional Text }
                      , readOnly : Optional Bool
                      , volumeAttributes :
                          Optional (List { mapKey : Text, mapValue : Text })
                      }
                , downwardAPI =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { fieldRef :
                                    Optional
                                      { apiVersion : Optional Text
                                      , fieldPath : Text
                                      }
                                , mode : Optional Natural
                                , path : Text
                                , resourceFieldRef :
                                    Optional
                                      { containerName : Optional Text
                                      , divisor : Optional Text
                                      , resource : Text
                                      }
                                }
                            )
                      }
                , emptyDir =
                    None { medium : Optional Text, sizeLimit : Optional Text }
                , fc =
                    None
                      { fsType : Optional Text
                      , lun : Optional Natural
                      , readOnly : Optional Bool
                      , targetWWNs : Optional (List Text)
                      , wwids : Optional (List Text)
                      }
                , flexVolume =
                    None
                      { driver : Text
                      , fsType : Optional Text
                      , options :
                          Optional (List { mapKey : Text, mapValue : Text })
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      }
                , flocker =
                    None
                      { datasetName : Optional Text
                      , datasetUUID : Optional Text
                      }
                , gcePersistentDisk =
                    None
                      { fsType : Optional Text
                      , partition : Optional Natural
                      , pdName : Text
                      , readOnly : Optional Bool
                      }
                , gitRepo =
                    None
                      { directory : Optional Text
                      , repository : Text
                      , revision : Optional Text
                      }
                , glusterfs =
                    None
                      { endpoints : Text
                      , path : Text
                      , readOnly : Optional Bool
                      }
                , hostPath = None { path : Text, type : Optional Text }
                , iscsi =
                    None
                      { chapAuthDiscovery : Optional Bool
                      , chapAuthSession : Optional Bool
                      , fsType : Optional Text
                      , initiatorName : Optional Text
                      , iqn : Text
                      , iscsiInterface : Optional Text
                      , lun : Natural
                      , portals : Optional (List Text)
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , targetPortal : Text
                      }
                , name = "redis-data"
                , nfs =
                    None
                      { path : Text, readOnly : Optional Bool, server : Text }
                , persistentVolumeClaim = Some
                  { claimName = "redis-store", readOnly = None Bool }
                , photonPersistentDisk =
                    None { fsType : Optional Text, pdID : Text }
                , portworxVolume =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , volumeID : Text
                      }
                , projected =
                    None
                      { defaultMode : Optional Natural
                      , sources :
                          List
                            { configMap :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { key : Text
                                            , mode : Optional Natural
                                            , path : Text
                                            }
                                        )
                                  , name : Optional Text
                                  , optional : Optional Bool
                                  }
                            , downwardAPI :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { fieldRef :
                                                Optional
                                                  { apiVersion : Optional Text
                                                  , fieldPath : Text
                                                  }
                                            , mode : Optional Natural
                                            , path : Text
                                            , resourceFieldRef :
                                                Optional
                                                  { containerName :
                                                      Optional Text
                                                  , divisor : Optional Text
                                                  , resource : Text
                                                  }
                                            }
                                        )
                                  }
                            , secret :
                                Optional
                                  { items :
                                      Optional
                                        ( List
                                            { key : Text
                                            , mode : Optional Natural
                                            , path : Text
                                            }
                                        )
                                  , name : Optional Text
                                  , optional : Optional Bool
                                  }
                            , serviceAccountToken :
                                Optional
                                  { audience : Optional Text
                                  , expirationSeconds : Optional Natural
                                  , path : Text
                                  }
                            }
                      }
                , quobyte =
                    None
                      { group : Optional Text
                      , readOnly : Optional Bool
                      , registry : Text
                      , tenant : Optional Text
                      , user : Optional Text
                      , volume : Text
                      }
                , rbd =
                    None
                      { fsType : Optional Text
                      , image : Text
                      , keyring : Optional Text
                      , monitors : List Text
                      , pool : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , user : Optional Text
                      }
                , scaleIO =
                    None
                      { fsType : Optional Text
                      , gateway : Text
                      , protectionDomain : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : { name : Optional Text }
                      , sslEnabled : Optional Bool
                      , storageMode : Optional Text
                      , storagePool : Optional Text
                      , system : Text
                      , volumeName : Optional Text
                      }
                , secret =
                    None
                      { defaultMode : Optional Natural
                      , items :
                          Optional
                            ( List
                                { key : Text
                                , mode : Optional Natural
                                , path : Text
                                }
                            )
                      , optional : Optional Bool
                      , secretName : Optional Text
                      }
                , storageos =
                    None
                      { fsType : Optional Text
                      , readOnly : Optional Bool
                      , secretRef : Optional { name : Optional Text }
                      , volumeName : Optional Text
                      , volumeNamespace : Optional Text
                      }
                , vsphereVolume =
                    None
                      { fsType : Optional Text
                      , storagePolicyID : Optional Text
                      , storagePolicyName : Optional Text
                      , volumePath : Text
                      }
                }
              ]
            }
          }
        }
      , status =
          None
            { availableReplicas : Optional Natural
            , collisionCount : Optional Natural
            , conditions :
                Optional
                  ( List
                      { lastTransitionTime : Optional Text
                      , lastUpdateTime : Optional Text
                      , message : Optional Text
                      , reason : Optional Text
                      , status : Text
                      , type : Text
                      }
                  )
            , observedGeneration : Optional Natural
            , readyReplicas : Optional Natural
            , replicas : Optional Natural
            , unavailableReplicas : Optional Natural
            , updatedReplicas : Optional Natural
            }
      }
    }
  , PersistentVolumeClaim =
    { redis-cache =
      { apiVersion = "v1"
      , kind = "PersistentVolumeClaim"
      , metadata =
        { annotations = None (List { mapKey : Text, mapValue : Text })
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , `app.kubernetes.io/component` = "redis"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "redis-cache"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { accessModes = Some [ "ReadWriteOnce" ]
        , dataSource =
            None { apiGroup : Optional Text, kind : Text, name : Text }
        , resources = Some
          { limits = None (List { mapKey : Text, mapValue : Text })
          , requests = Some (toMap { storage = "100Gi" })
          }
        , selector =
            None
              { matchExpressions :
                  Optional
                    ( List
                        { key : Text
                        , operator : Text
                        , values : Optional (List Text)
                        }
                    )
              , matchLabels : Optional (List { mapKey : Text, mapValue : Text })
              }
        , storageClassName = Some "sourcegraph"
        , volumeMode = None Text
        , volumeName = None Text
        }
      , status =
          None
            { accessModes : Optional (List Text)
            , capacity : Optional (List { mapKey : Text, mapValue : Text })
            , conditions :
                Optional
                  ( List
                      { lastProbeTime : Optional Text
                      , lastTransitionTime : Optional Text
                      , message : Optional Text
                      , reason : Optional Text
                      , status : Text
                      , type : Text
                      }
                  )
            , phase : Optional Text
            }
      }
    , redis-store =
      { apiVersion = "v1"
      , kind = "PersistentVolumeClaim"
      , metadata =
        { annotations = None (List { mapKey : Text, mapValue : Text })
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , `app.kubernetes.io/component` = "redis"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "redis-store"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { accessModes = Some [ "ReadWriteOnce" ]
        , dataSource =
            None { apiGroup : Optional Text, kind : Text, name : Text }
        , resources = Some
          { limits = None (List { mapKey : Text, mapValue : Text })
          , requests = Some (toMap { storage = "100Gi" })
          }
        , selector =
            None
              { matchExpressions :
                  Optional
                    ( List
                        { key : Text
                        , operator : Text
                        , values : Optional (List Text)
                        }
                    )
              , matchLabels : Optional (List { mapKey : Text, mapValue : Text })
              }
        , storageClassName = Some "sourcegraph"
        , volumeMode = None Text
        , volumeName = None Text
        }
      , status =
          None
            { accessModes : Optional (List Text)
            , capacity : Optional (List { mapKey : Text, mapValue : Text })
            , conditions :
                Optional
                  ( List
                      { lastProbeTime : Optional Text
                      , lastTransitionTime : Optional Text
                      , message : Optional Text
                      , reason : Optional Text
                      , status : Text
                      , type : Text
                      }
                  )
            , phase : Optional Text
            }
      }
    }
  , Service =
    { redis-cache =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "9121"
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "redis-cache"
                , `app.kubernetes.io/component` = "redis"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "redis-cache"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "redis"
            , nodePort = None Natural
            , port = 6379
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "redis")
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "redis-cache" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    , redis-store =
      { apiVersion = "v1"
      , kind = "Service"
      , metadata =
        { annotations = Some
            ( toMap
                { `sourcegraph.prometheus/scrape` = "true"
                , `prometheus.io/port` = "9121"
                }
            )
        , clusterName = None Text
        , creationTimestamp = None Text
        , deletionGracePeriodSeconds = None Natural
        , deletionTimestamp = None Text
        , finalizers = None (List Text)
        , generateName = None Text
        , generation = None Natural
        , labels = Some
            ( toMap
                { sourcegraph-resource-requires = "no-cluster-admin"
                , app = "redis-store"
                , `app.kubernetes.io/component` = "redis"
                , deploy = "sourcegraph"
                }
            )
        , managedFields =
            None
              ( List
                  { apiVersion : Text
                  , fieldsType : Optional Text
                  , fieldsV1 :
                      Optional (List { mapKey : Text, mapValue : Text })
                  , manager : Optional Text
                  , operation : Optional Text
                  , time : Optional Text
                  }
              )
        , name = Some "redis-store"
        , namespace = None Text
        , ownerReferences =
            None
              ( List
                  { apiVersion : Text
                  , blockOwnerDeletion : Optional Bool
                  , controller : Optional Bool
                  , kind : Text
                  , name : Text
                  , uid : Text
                  }
              )
        , resourceVersion = None Text
        , selfLink = None Text
        , uid = None Text
        }
      , spec = Some
        { clusterIP = None Text
        , externalIPs = None (List Text)
        , externalName = None Text
        , externalTrafficPolicy = None Text
        , healthCheckNodePort = None Natural
        , ipFamily = None Text
        , loadBalancerIP = None Text
        , loadBalancerSourceRanges = None (List Text)
        , ports = Some
          [ { appProtocol = None Text
            , name = Some "redis"
            , nodePort = None Natural
            , port = 6379
            , protocol = None Text
            , targetPort = Some
                (< Int : Natural | String : Text >.String "redis")
            }
          ]
        , publishNotReadyAddresses = None Bool
        , selector = Some (toMap { app = "redis-store" })
        , sessionAffinity = None Text
        , sessionAffinityConfig =
            None { clientIP : Optional { timeoutSeconds : Optional Natural } }
        , topologyKeys = None (List Text)
        , type = Some "ClusterIP"
        }
      , status =
          None
            { loadBalancer :
                Optional
                  { ingress :
                      Optional
                        (List { hostname : Optional Text, ip : Optional Text })
                  }
            }
      }
    }
  }
, Repo-Updater =
  { Deployment.repo-updater
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          ( toMap
              { description =
                  "Handles repository metadata (not Git data) lookups and updates from external code hosts and other similar services."
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "repo-updater"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "repo-updater"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "repo-updater" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 0)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              (toMap { app = "repo-updater", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/repo-updater:insiders@sha256:ed2460d032ab2b025f68cf127ddf39fb17dbb53c83f718c142de66d51ecd575d"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "repo-updater"
              , ports = Some
                [ { containerPort = 3182
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                , { containerPort = 6060
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "debug"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = Some 3
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = None Natural
                , periodSeconds = Some 1
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , resources = Some
                { limits = Some (toMap { memory = "2Gi", cpu = "1" })
                , requests = Some (toMap { memory = "500Mi", cpu = "1" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes =
              None
                ( List
                    { awsElasticBlockStore :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , azureDisk :
                        Optional
                          { cachingMode : Optional Text
                          , diskName : Text
                          , diskURI : Text
                          , fsType : Optional Text
                          , kind : Text
                          , readOnly : Optional Bool
                          }
                    , azureFile :
                        Optional
                          { readOnly : Optional Bool
                          , secretName : Text
                          , shareName : Text
                          }
                    , cephfs :
                        Optional
                          { monitors : List Text
                          , path : Optional Text
                          , readOnly : Optional Bool
                          , secretFile : Optional Text
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , cinder :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeID : Text
                          }
                    , configMap :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , csi :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , nodePublishSecretRef :
                              Optional { name : Optional Text }
                          , readOnly : Optional Bool
                          , volumeAttributes :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , downwardAPI :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , mode : Optional Natural
                                    , path : Text
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    }
                                )
                          }
                    , emptyDir :
                        Optional
                          { medium : Optional Text, sizeLimit : Optional Text }
                    , fc :
                        Optional
                          { fsType : Optional Text
                          , lun : Optional Natural
                          , readOnly : Optional Bool
                          , targetWWNs : Optional (List Text)
                          , wwids : Optional (List Text)
                          }
                    , flexVolume :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , options :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          }
                    , flocker :
                        Optional
                          { datasetName : Optional Text
                          , datasetUUID : Optional Text
                          }
                    , gcePersistentDisk :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , pdName : Text
                          , readOnly : Optional Bool
                          }
                    , gitRepo :
                        Optional
                          { directory : Optional Text
                          , repository : Text
                          , revision : Optional Text
                          }
                    , glusterfs :
                        Optional
                          { endpoints : Text
                          , path : Text
                          , readOnly : Optional Bool
                          }
                    , hostPath : Optional { path : Text, type : Optional Text }
                    , iscsi :
                        Optional
                          { chapAuthDiscovery : Optional Bool
                          , chapAuthSession : Optional Bool
                          , fsType : Optional Text
                          , initiatorName : Optional Text
                          , iqn : Text
                          , iscsiInterface : Optional Text
                          , lun : Natural
                          , portals : Optional (List Text)
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , targetPortal : Text
                          }
                    , name : Text
                    , nfs :
                        Optional
                          { path : Text
                          , readOnly : Optional Bool
                          , server : Text
                          }
                    , persistentVolumeClaim :
                        Optional { claimName : Text, readOnly : Optional Bool }
                    , photonPersistentDisk :
                        Optional { fsType : Optional Text, pdID : Text }
                    , portworxVolume :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , projected :
                        Optional
                          { defaultMode : Optional Natural
                          , sources :
                              List
                                { configMap :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , downwardAPI :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { fieldRef :
                                                    Optional
                                                      { apiVersion :
                                                          Optional Text
                                                      , fieldPath : Text
                                                      }
                                                , mode : Optional Natural
                                                , path : Text
                                                , resourceFieldRef :
                                                    Optional
                                                      { containerName :
                                                          Optional Text
                                                      , divisor : Optional Text
                                                      , resource : Text
                                                      }
                                                }
                                            )
                                      }
                                , secret :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , serviceAccountToken :
                                    Optional
                                      { audience : Optional Text
                                      , expirationSeconds : Optional Natural
                                      , path : Text
                                      }
                                }
                          }
                    , quobyte :
                        Optional
                          { group : Optional Text
                          , readOnly : Optional Bool
                          , registry : Text
                          , tenant : Optional Text
                          , user : Optional Text
                          , volume : Text
                          }
                    , rbd :
                        Optional
                          { fsType : Optional Text
                          , image : Text
                          , keyring : Optional Text
                          , monitors : List Text
                          , pool : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , scaleIO :
                        Optional
                          { fsType : Optional Text
                          , gateway : Text
                          , protectionDomain : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : { name : Optional Text }
                          , sslEnabled : Optional Bool
                          , storageMode : Optional Text
                          , storagePool : Optional Text
                          , system : Text
                          , volumeName : Optional Text
                          }
                    , secret :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , optional : Optional Bool
                          , secretName : Optional Text
                          }
                    , storageos :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeName : Optional Text
                          , volumeNamespace : Optional Text
                          }
                    , vsphereVolume :
                        Optional
                          { fsType : Optional Text
                          , storagePolicyID : Optional Text
                          , storagePolicyName : Optional Text
                          , volumePath : Text
                          }
                    }
                )
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service.repo-updater
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "6060"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "repo-updater"
              , `app.kubernetes.io/component` = "repo-updater"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "repo-updater"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 3182
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "repo-updater" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Searcher =
  { Deployment.searcher
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          (toMap { description = "Backend for text search operations." })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "searcher"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "searcher"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "searcher" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 1)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some (toMap { app = "searcher", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env = Some
                [ { name = "SEARCHER_CACHE_SIZE_MB"
                  , value = Some "100000"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = None Text, fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                , { name = "CACHE_DIR"
                  , value = Some "/mnt/cache/\$(POD_NAME)"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/searcher:insiders@sha256:83067d2a03d5de115497c01f95a09a09d208c4ba60b6fc7adfb6270a104ce397"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "searcher"
              , ports = Some
                [ { containerPort = 3181
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                , { containerPort = 6060
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "debug"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = Some 3
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = None Natural
                , periodSeconds = Some 5
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , resources = Some
                { limits = Some (toMap { memory = "2G", cpu = "2" })
                , requests = Some (toMap { memory = "500M", cpu = "500m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/mnt/cache"
                  , mountPropagation = None Text
                  , name = "cache-ssd"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir = Some { medium = None Text, sizeLimit = None Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "cache-ssd"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service.searcher
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "6060"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "searcher"
              , `app.kubernetes.io/component` = "searcher"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "searcher"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 3181
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        , { appProtocol = None Text
          , name = Some "debug"
          , nodePort = None Natural
          , port = 6060
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "debug")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "searcher" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Symbols =
  { Deployment.symbols
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          (toMap { description = "Backend for symbols operations." })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "symbols"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "symbols"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "symbols" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 1)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some (toMap { app = "symbols", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env = Some
                [ { name = "SYMBOLS_CACHE_SIZE_MB"
                  , value = Some "100000"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                , { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = None Text, fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                , { name = "CACHE_DIR"
                  , value = Some "/mnt/cache/\$(POD_NAME)"
                  , valueFrom =
                      None
                        { configMapKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        , fieldRef :
                            Optional
                              { apiVersion : Optional Text, fieldPath : Text }
                        , resourceFieldRef :
                            Optional
                              { containerName : Optional Text
                              , divisor : Optional Text
                              , resource : Text
                              }
                        , secretKeyRef :
                            Optional
                              { key : Text
                              , name : Optional Text
                              , optional : Optional Bool
                              }
                        }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/symbols:insiders@sha256:cbfae2f0c766fdcf0aad7c6c72a7ad3bd2f2326fcb93fb95feda6eed139d22f6"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = Some 60
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , name = "symbols"
              , ports = Some
                [ { containerPort = 3184
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                , { containerPort = 6060
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "debug"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/healthz"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = None Natural
                , periodSeconds = Some 5
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , resources = Some
                { limits = Some (toMap { memory = "2G", cpu = "2" })
                , requests = Some (toMap { memory = "500M", cpu = "500m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts = Some
                [ { mountPath = "/mnt/cache"
                  , mountPropagation = None Text
                  , name = "cache-ssd"
                  , readOnly = None Bool
                  , subPath = None Text
                  , subPathExpr = None Text
                  }
                ]
              , workingDir = None Text
              }
            , { args = Some
                [ "--reporter.grpc.host-port=jaeger-collector:14250"
                , "--reporter.type=grpc"
                ]
              , command = None (List Text)
              , env = Some
                [ { name = "POD_NAME"
                  , value = None Text
                  , valueFrom = Some
                    { configMapKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , fieldRef = Some
                      { apiVersion = Some "v1", fieldPath = "metadata.name" }
                    , resourceFieldRef =
                        None
                          { containerName : Optional Text
                          , divisor : Optional Text
                          , resource : Text
                          }
                    , secretKeyRef =
                        None
                          { key : Text
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    }
                  }
                ]
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/jaeger-agent:insiders@sha256:f3faf496fe750ce75e6304f9ac10d8e1f42c9c9bdab3ab0c2fbf77a8d26084a4"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , name = "jaeger-agent"
              , ports = Some
                [ { containerPort = 5775
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 5778
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "TCP"
                  }
                , { containerPort = 6831
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                , { containerPort = 6832
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = None Text
                  , protocol = Some "UDP"
                  }
                ]
              , readinessProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , resources = Some
                { limits = Some (toMap { memory = "500M", cpu = "1" })
                , requests = Some (toMap { memory = "100M", cpu = "100m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = None Text
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes = Some
            [ { awsElasticBlockStore =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , azureDisk =
                  None
                    { cachingMode : Optional Text
                    , diskName : Text
                    , diskURI : Text
                    , fsType : Optional Text
                    , kind : Text
                    , readOnly : Optional Bool
                    }
              , azureFile =
                  None
                    { readOnly : Optional Bool
                    , secretName : Text
                    , shareName : Text
                    }
              , cephfs =
                  None
                    { monitors : List Text
                    , path : Optional Text
                    , readOnly : Optional Bool
                    , secretFile : Optional Text
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , cinder =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeID : Text
                    }
              , configMap =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , name : Optional Text
                    , optional : Optional Bool
                    }
              , csi =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , nodePublishSecretRef : Optional { name : Optional Text }
                    , readOnly : Optional Bool
                    , volumeAttributes :
                        Optional (List { mapKey : Text, mapValue : Text })
                    }
              , downwardAPI =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , mode : Optional Natural
                              , path : Text
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              }
                          )
                    }
              , emptyDir = Some { medium = None Text, sizeLimit = None Text }
              , fc =
                  None
                    { fsType : Optional Text
                    , lun : Optional Natural
                    , readOnly : Optional Bool
                    , targetWWNs : Optional (List Text)
                    , wwids : Optional (List Text)
                    }
              , flexVolume =
                  None
                    { driver : Text
                    , fsType : Optional Text
                    , options :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    }
              , flocker =
                  None
                    { datasetName : Optional Text, datasetUUID : Optional Text }
              , gcePersistentDisk =
                  None
                    { fsType : Optional Text
                    , partition : Optional Natural
                    , pdName : Text
                    , readOnly : Optional Bool
                    }
              , gitRepo =
                  None
                    { directory : Optional Text
                    , repository : Text
                    , revision : Optional Text
                    }
              , glusterfs =
                  None
                    { endpoints : Text, path : Text, readOnly : Optional Bool }
              , hostPath = None { path : Text, type : Optional Text }
              , iscsi =
                  None
                    { chapAuthDiscovery : Optional Bool
                    , chapAuthSession : Optional Bool
                    , fsType : Optional Text
                    , initiatorName : Optional Text
                    , iqn : Text
                    , iscsiInterface : Optional Text
                    , lun : Natural
                    , portals : Optional (List Text)
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , targetPortal : Text
                    }
              , name = "cache-ssd"
              , nfs =
                  None { path : Text, readOnly : Optional Bool, server : Text }
              , persistentVolumeClaim =
                  None { claimName : Text, readOnly : Optional Bool }
              , photonPersistentDisk =
                  None { fsType : Optional Text, pdID : Text }
              , portworxVolume =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , volumeID : Text
                    }
              , projected =
                  None
                    { defaultMode : Optional Natural
                    , sources :
                        List
                          { configMap :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , downwardAPI :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { fieldRef :
                                              Optional
                                                { apiVersion : Optional Text
                                                , fieldPath : Text
                                                }
                                          , mode : Optional Natural
                                          , path : Text
                                          , resourceFieldRef :
                                              Optional
                                                { containerName : Optional Text
                                                , divisor : Optional Text
                                                , resource : Text
                                                }
                                          }
                                      )
                                }
                          , secret :
                              Optional
                                { items :
                                    Optional
                                      ( List
                                          { key : Text
                                          , mode : Optional Natural
                                          , path : Text
                                          }
                                      )
                                , name : Optional Text
                                , optional : Optional Bool
                                }
                          , serviceAccountToken :
                              Optional
                                { audience : Optional Text
                                , expirationSeconds : Optional Natural
                                , path : Text
                                }
                          }
                    }
              , quobyte =
                  None
                    { group : Optional Text
                    , readOnly : Optional Bool
                    , registry : Text
                    , tenant : Optional Text
                    , user : Optional Text
                    , volume : Text
                    }
              , rbd =
                  None
                    { fsType : Optional Text
                    , image : Text
                    , keyring : Optional Text
                    , monitors : List Text
                    , pool : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , user : Optional Text
                    }
              , scaleIO =
                  None
                    { fsType : Optional Text
                    , gateway : Text
                    , protectionDomain : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : { name : Optional Text }
                    , sslEnabled : Optional Bool
                    , storageMode : Optional Text
                    , storagePool : Optional Text
                    , system : Text
                    , volumeName : Optional Text
                    }
              , secret =
                  None
                    { defaultMode : Optional Natural
                    , items :
                        Optional
                          ( List
                              { key : Text
                              , mode : Optional Natural
                              , path : Text
                              }
                          )
                    , optional : Optional Bool
                    , secretName : Optional Text
                    }
              , storageos =
                  None
                    { fsType : Optional Text
                    , readOnly : Optional Bool
                    , secretRef : Optional { name : Optional Text }
                    , volumeName : Optional Text
                    , volumeNamespace : Optional Text
                    }
              , vsphereVolume =
                  None
                    { fsType : Optional Text
                    , storagePolicyID : Optional Text
                    , storagePolicyName : Optional Text
                    , volumePath : Text
                    }
              }
            ]
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service.symbols
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = Some
          ( toMap
              { `sourcegraph.prometheus/scrape` = "true"
              , `prometheus.io/port` = "6060"
              }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "symbols"
              , `app.kubernetes.io/component` = "symbols"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "symbols"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 3184
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        , { appProtocol = None Text
          , name = Some "debug"
          , nodePort = None Natural
          , port = 6060
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "debug")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "symbols" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
, Syntect-Server =
  { Deployment.syntect-server
    =
    { apiVersion = "apps/v1"
    , kind = "Deployment"
    , metadata =
      { annotations = Some
          ( toMap
              { description = "Backend for syntax highlighting operations." }
          )
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , `app.kubernetes.io/component` = "syntect-server"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "syntect-server"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { minReadySeconds = Some 10
      , paused = None Bool
      , progressDeadlineSeconds = None Natural
      , replicas = Some 1
      , revisionHistoryLimit = Some 10
      , selector =
        { matchExpressions =
            None
              ( List
                  { key : Text, operator : Text, values : Optional (List Text) }
              )
        , matchLabels = Some (toMap { app = "syntect-server" })
        }
      , strategy = Some
        { rollingUpdate = Some
          { maxSurge = Some (< Int : Natural | String : Text >.Int 1)
          , maxUnavailable = Some (< Int : Natural | String : Text >.Int 0)
          }
        , type = Some "RollingUpdate"
        }
      , template =
        { metadata =
          { annotations = None (List { mapKey : Text, mapValue : Text })
          , clusterName = None Text
          , creationTimestamp = None Text
          , deletionGracePeriodSeconds = None Natural
          , deletionTimestamp = None Text
          , finalizers = None (List Text)
          , generateName = None Text
          , generation = None Natural
          , labels = Some
              (toMap { app = "syntect-server", deploy = "sourcegraph" })
          , managedFields =
              None
                ( List
                    { apiVersion : Text
                    , fieldsType : Optional Text
                    , fieldsV1 :
                        Optional (List { mapKey : Text, mapValue : Text })
                    , manager : Optional Text
                    , operation : Optional Text
                    , time : Optional Text
                    }
                )
          , name = None Text
          , namespace = None Text
          , ownerReferences =
              None
                ( List
                    { apiVersion : Text
                    , blockOwnerDeletion : Optional Bool
                    , controller : Optional Bool
                    , kind : Text
                    , name : Text
                    , uid : Text
                    }
                )
          , resourceVersion = None Text
          , selfLink = None Text
          , uid = None Text
          }
        , spec = Some
          { activeDeadlineSeconds = None Natural
          , affinity =
              None
                { nodeAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { preference :
                                    { matchExpressions :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    , matchFields :
                                        Optional
                                          ( List
                                              { key : Text
                                              , operator : Text
                                              , values : Optional (List Text)
                                              }
                                          )
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            { nodeSelectorTerms :
                                List
                                  { matchExpressions :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  , matchFields :
                                      Optional
                                        ( List
                                            { key : Text
                                            , operator : Text
                                            , values : Optional (List Text)
                                            }
                                        )
                                  }
                            }
                      }
                , podAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                , podAntiAffinity :
                    Optional
                      { preferredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { podAffinityTerm :
                                    { labelSelector :
                                        Optional
                                          { matchExpressions :
                                              Optional
                                                ( List
                                                    { key : Text
                                                    , operator : Text
                                                    , values :
                                                        Optional (List Text)
                                                    }
                                                )
                                          , matchLabels :
                                              Optional
                                                ( List
                                                    { mapKey : Text
                                                    , mapValue : Text
                                                    }
                                                )
                                          }
                                    , namespaces : Optional (List Text)
                                    , topologyKey : Text
                                    }
                                , weight : Natural
                                }
                            )
                      , requiredDuringSchedulingIgnoredDuringExecution :
                          Optional
                            ( List
                                { labelSelector :
                                    Optional
                                      { matchExpressions :
                                          Optional
                                            ( List
                                                { key : Text
                                                , operator : Text
                                                , values : Optional (List Text)
                                                }
                                            )
                                      , matchLabels :
                                          Optional
                                            ( List
                                                { mapKey : Text
                                                , mapValue : Text
                                                }
                                            )
                                      }
                                , namespaces : Optional (List Text)
                                , topologyKey : Text
                                }
                            )
                      }
                }
          , automountServiceAccountToken = None Bool
          , containers =
            [ { args = None (List Text)
              , command = None (List Text)
              , env =
                  None
                    ( List
                        { name : Text
                        , value : Optional Text
                        , valueFrom :
                            Optional
                              { configMapKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , fieldRef :
                                  Optional
                                    { apiVersion : Optional Text
                                    , fieldPath : Text
                                    }
                              , resourceFieldRef :
                                  Optional
                                    { containerName : Optional Text
                                    , divisor : Optional Text
                                    , resource : Text
                                    }
                              , secretKeyRef :
                                  Optional
                                    { key : Text
                                    , name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                        }
                    )
              , envFrom =
                  None
                    ( List
                        { configMapRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        , prefix : Optional Text
                        , secretRef :
                            Optional
                              { name : Optional Text, optional : Optional Bool }
                        }
                    )
              , image = Some
                  "index.docker.io/sourcegraph/syntax-highlighter:insiders@sha256:b9e1f7471ebe596415ca2c7ab8e1282d7c4ba4e4e71390d80e9924a73139d793"
              , imagePullPolicy = None Text
              , lifecycle =
                  None
                    { postStart :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    , preStop :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          }
                    }
              , livenessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet = Some
                  { host = None Text
                  , httpHeaders = None (List { name : Text, value : Text })
                  , path = Some "/health"
                  , port = < Int : Natural | String : Text >.String "http"
                  , scheme = Some "HTTP"
                  }
                , initialDelaySeconds = Some 5
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket =
                    None
                      { host : Optional Text
                      , port : < Int : Natural | String : Text >
                      }
                , timeoutSeconds = Some 5
                }
              , name = "syntect-server"
              , ports = Some
                [ { containerPort = 9238
                  , hostIP = None Text
                  , hostPort = None Natural
                  , name = Some "http"
                  , protocol = None Text
                  }
                ]
              , readinessProbe = Some
                { exec = None { command : Optional (List Text) }
                , failureThreshold = None Natural
                , httpGet =
                    None
                      { host : Optional Text
                      , httpHeaders :
                          Optional (List { name : Text, value : Text })
                      , path : Optional Text
                      , port : < Int : Natural | String : Text >
                      , scheme : Optional Text
                      }
                , initialDelaySeconds = None Natural
                , periodSeconds = None Natural
                , successThreshold = None Natural
                , tcpSocket = Some
                  { host = None Text
                  , port = < Int : Natural | String : Text >.String "http"
                  }
                , timeoutSeconds = None Natural
                }
              , resources = Some
                { limits = Some (toMap { memory = "6G", cpu = "4" })
                , requests = Some (toMap { memory = "2G", cpu = "250m" })
                }
              , securityContext =
                  None
                    { allowPrivilegeEscalation : Optional Bool
                    , capabilities :
                        Optional
                          { add : Optional (List Text)
                          , drop : Optional (List Text)
                          }
                    , privileged : Optional Bool
                    , procMount : Optional Text
                    , readOnlyRootFilesystem : Optional Bool
                    , runAsGroup : Optional Natural
                    , runAsNonRoot : Optional Bool
                    , runAsUser : Optional Natural
                    , seLinuxOptions :
                        Optional
                          { level : Optional Text
                          , role : Optional Text
                          , type : Optional Text
                          , user : Optional Text
                          }
                    , windowsOptions :
                        Optional
                          { gmsaCredentialSpec : Optional Text
                          , gmsaCredentialSpecName : Optional Text
                          , runAsUserName : Optional Text
                          }
                    }
              , startupProbe =
                  None
                    { exec : Optional { command : Optional (List Text) }
                    , failureThreshold : Optional Natural
                    , httpGet :
                        Optional
                          { host : Optional Text
                          , httpHeaders :
                              Optional (List { name : Text, value : Text })
                          , path : Optional Text
                          , port : < Int : Natural | String : Text >
                          , scheme : Optional Text
                          }
                    , initialDelaySeconds : Optional Natural
                    , periodSeconds : Optional Natural
                    , successThreshold : Optional Natural
                    , tcpSocket :
                        Optional
                          { host : Optional Text
                          , port : < Int : Natural | String : Text >
                          }
                    , timeoutSeconds : Optional Natural
                    }
              , stdin = None Bool
              , stdinOnce = None Bool
              , terminationMessagePath = None Text
              , terminationMessagePolicy = Some "FallbackToLogsOnError"
              , tty = None Bool
              , volumeDevices = None (List { devicePath : Text, name : Text })
              , volumeMounts =
                  None
                    ( List
                        { mountPath : Text
                        , mountPropagation : Optional Text
                        , name : Text
                        , readOnly : Optional Bool
                        , subPath : Optional Text
                        , subPathExpr : Optional Text
                        }
                    )
              , workingDir = None Text
              }
            ]
          , dnsConfig =
              None
                { nameservers : Optional (List Text)
                , options :
                    Optional
                      (List { name : Optional Text, value : Optional Text })
                , searches : Optional (List Text)
                }
          , dnsPolicy = None Text
          , enableServiceLinks = None Bool
          , ephemeralContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , targetContainerName : Optional Text
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , hostAliases =
              None
                (List { hostnames : Optional (List Text), ip : Optional Text })
          , hostIPC = None Bool
          , hostNetwork = None Bool
          , hostPID = None Bool
          , hostname = None Text
          , imagePullSecrets = None (List { name : Optional Text })
          , initContainers =
              None
                ( List
                    { args : Optional (List Text)
                    , command : Optional (List Text)
                    , env :
                        Optional
                          ( List
                              { name : Text
                              , value : Optional Text
                              , valueFrom :
                                  Optional
                                    { configMapKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    , fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    , secretKeyRef :
                                        Optional
                                          { key : Text
                                          , name : Optional Text
                                          , optional : Optional Bool
                                          }
                                    }
                              }
                          )
                    , envFrom :
                        Optional
                          ( List
                              { configMapRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              , prefix : Optional Text
                              , secretRef :
                                  Optional
                                    { name : Optional Text
                                    , optional : Optional Bool
                                    }
                              }
                          )
                    , image : Optional Text
                    , imagePullPolicy : Optional Text
                    , lifecycle :
                        Optional
                          { postStart :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          , preStop :
                              Optional
                                { exec :
                                    Optional { command : Optional (List Text) }
                                , httpGet :
                                    Optional
                                      { host : Optional Text
                                      , httpHeaders :
                                          Optional
                                            (List { name : Text, value : Text })
                                      , path : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      , scheme : Optional Text
                                      }
                                , tcpSocket :
                                    Optional
                                      { host : Optional Text
                                      , port : < Int : Natural | String : Text >
                                      }
                                }
                          }
                    , livenessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , name : Text
                    , ports :
                        Optional
                          ( List
                              { containerPort : Natural
                              , hostIP : Optional Text
                              , hostPort : Optional Natural
                              , name : Optional Text
                              , protocol : Optional Text
                              }
                          )
                    , readinessProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , resources :
                        Optional
                          { limits :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , requests :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , securityContext :
                        Optional
                          { allowPrivilegeEscalation : Optional Bool
                          , capabilities :
                              Optional
                                { add : Optional (List Text)
                                , drop : Optional (List Text)
                                }
                          , privileged : Optional Bool
                          , procMount : Optional Text
                          , readOnlyRootFilesystem : Optional Bool
                          , runAsGroup : Optional Natural
                          , runAsNonRoot : Optional Bool
                          , runAsUser : Optional Natural
                          , seLinuxOptions :
                              Optional
                                { level : Optional Text
                                , role : Optional Text
                                , type : Optional Text
                                , user : Optional Text
                                }
                          , windowsOptions :
                              Optional
                                { gmsaCredentialSpec : Optional Text
                                , gmsaCredentialSpecName : Optional Text
                                , runAsUserName : Optional Text
                                }
                          }
                    , startupProbe :
                        Optional
                          { exec : Optional { command : Optional (List Text) }
                          , failureThreshold : Optional Natural
                          , httpGet :
                              Optional
                                { host : Optional Text
                                , httpHeaders :
                                    Optional
                                      (List { name : Text, value : Text })
                                , path : Optional Text
                                , port : < Int : Natural | String : Text >
                                , scheme : Optional Text
                                }
                          , initialDelaySeconds : Optional Natural
                          , periodSeconds : Optional Natural
                          , successThreshold : Optional Natural
                          , tcpSocket :
                              Optional
                                { host : Optional Text
                                , port : < Int : Natural | String : Text >
                                }
                          , timeoutSeconds : Optional Natural
                          }
                    , stdin : Optional Bool
                    , stdinOnce : Optional Bool
                    , terminationMessagePath : Optional Text
                    , terminationMessagePolicy : Optional Text
                    , tty : Optional Bool
                    , volumeDevices :
                        Optional (List { devicePath : Text, name : Text })
                    , volumeMounts :
                        Optional
                          ( List
                              { mountPath : Text
                              , mountPropagation : Optional Text
                              , name : Text
                              , readOnly : Optional Bool
                              , subPath : Optional Text
                              , subPathExpr : Optional Text
                              }
                          )
                    , workingDir : Optional Text
                    }
                )
          , nodeName = None Text
          , nodeSelector = None (List { mapKey : Text, mapValue : Text })
          , overhead = None (List { mapKey : Text, mapValue : Text })
          , preemptionPolicy = None Text
          , priority = None Natural
          , priorityClassName = None Text
          , readinessGates = None (List { conditionType : Text })
          , restartPolicy = None Text
          , runtimeClassName = None Text
          , schedulerName = None Text
          , securityContext = Some
            { fsGroup = None Natural
            , fsGroupChangePolicy = None Text
            , runAsGroup = None Natural
            , runAsNonRoot = None Bool
            , runAsUser = Some 0
            , seLinuxOptions =
                None
                  { level : Optional Text
                  , role : Optional Text
                  , type : Optional Text
                  , user : Optional Text
                  }
            , supplementalGroups = None (List Natural)
            , sysctls = None (List { name : Text, value : Text })
            , windowsOptions =
                None
                  { gmsaCredentialSpec : Optional Text
                  , gmsaCredentialSpecName : Optional Text
                  , runAsUserName : Optional Text
                  }
            }
          , serviceAccount = None Text
          , serviceAccountName = None Text
          , shareProcessNamespace = None Bool
          , subdomain = None Text
          , terminationGracePeriodSeconds = None Natural
          , tolerations =
              None
                ( List
                    { effect : Optional Text
                    , key : Optional Text
                    , operator : Optional Text
                    , tolerationSeconds : Optional Natural
                    , value : Optional Text
                    }
                )
          , topologySpreadConstraints =
              None
                ( List
                    { labelSelector :
                        Optional
                          { matchExpressions :
                              Optional
                                ( List
                                    { key : Text
                                    , operator : Text
                                    , values : Optional (List Text)
                                    }
                                )
                          , matchLabels :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , maxSkew : Natural
                    , topologyKey : Text
                    , whenUnsatisfiable : Text
                    }
                )
          , volumes =
              None
                ( List
                    { awsElasticBlockStore :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , azureDisk :
                        Optional
                          { cachingMode : Optional Text
                          , diskName : Text
                          , diskURI : Text
                          , fsType : Optional Text
                          , kind : Text
                          , readOnly : Optional Bool
                          }
                    , azureFile :
                        Optional
                          { readOnly : Optional Bool
                          , secretName : Text
                          , shareName : Text
                          }
                    , cephfs :
                        Optional
                          { monitors : List Text
                          , path : Optional Text
                          , readOnly : Optional Bool
                          , secretFile : Optional Text
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , cinder :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeID : Text
                          }
                    , configMap :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , name : Optional Text
                          , optional : Optional Bool
                          }
                    , csi :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , nodePublishSecretRef :
                              Optional { name : Optional Text }
                          , readOnly : Optional Bool
                          , volumeAttributes :
                              Optional (List { mapKey : Text, mapValue : Text })
                          }
                    , downwardAPI :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { fieldRef :
                                        Optional
                                          { apiVersion : Optional Text
                                          , fieldPath : Text
                                          }
                                    , mode : Optional Natural
                                    , path : Text
                                    , resourceFieldRef :
                                        Optional
                                          { containerName : Optional Text
                                          , divisor : Optional Text
                                          , resource : Text
                                          }
                                    }
                                )
                          }
                    , emptyDir :
                        Optional
                          { medium : Optional Text, sizeLimit : Optional Text }
                    , fc :
                        Optional
                          { fsType : Optional Text
                          , lun : Optional Natural
                          , readOnly : Optional Bool
                          , targetWWNs : Optional (List Text)
                          , wwids : Optional (List Text)
                          }
                    , flexVolume :
                        Optional
                          { driver : Text
                          , fsType : Optional Text
                          , options :
                              Optional (List { mapKey : Text, mapValue : Text })
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          }
                    , flocker :
                        Optional
                          { datasetName : Optional Text
                          , datasetUUID : Optional Text
                          }
                    , gcePersistentDisk :
                        Optional
                          { fsType : Optional Text
                          , partition : Optional Natural
                          , pdName : Text
                          , readOnly : Optional Bool
                          }
                    , gitRepo :
                        Optional
                          { directory : Optional Text
                          , repository : Text
                          , revision : Optional Text
                          }
                    , glusterfs :
                        Optional
                          { endpoints : Text
                          , path : Text
                          , readOnly : Optional Bool
                          }
                    , hostPath : Optional { path : Text, type : Optional Text }
                    , iscsi :
                        Optional
                          { chapAuthDiscovery : Optional Bool
                          , chapAuthSession : Optional Bool
                          , fsType : Optional Text
                          , initiatorName : Optional Text
                          , iqn : Text
                          , iscsiInterface : Optional Text
                          , lun : Natural
                          , portals : Optional (List Text)
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , targetPortal : Text
                          }
                    , name : Text
                    , nfs :
                        Optional
                          { path : Text
                          , readOnly : Optional Bool
                          , server : Text
                          }
                    , persistentVolumeClaim :
                        Optional { claimName : Text, readOnly : Optional Bool }
                    , photonPersistentDisk :
                        Optional { fsType : Optional Text, pdID : Text }
                    , portworxVolume :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , volumeID : Text
                          }
                    , projected :
                        Optional
                          { defaultMode : Optional Natural
                          , sources :
                              List
                                { configMap :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , downwardAPI :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { fieldRef :
                                                    Optional
                                                      { apiVersion :
                                                          Optional Text
                                                      , fieldPath : Text
                                                      }
                                                , mode : Optional Natural
                                                , path : Text
                                                , resourceFieldRef :
                                                    Optional
                                                      { containerName :
                                                          Optional Text
                                                      , divisor : Optional Text
                                                      , resource : Text
                                                      }
                                                }
                                            )
                                      }
                                , secret :
                                    Optional
                                      { items :
                                          Optional
                                            ( List
                                                { key : Text
                                                , mode : Optional Natural
                                                , path : Text
                                                }
                                            )
                                      , name : Optional Text
                                      , optional : Optional Bool
                                      }
                                , serviceAccountToken :
                                    Optional
                                      { audience : Optional Text
                                      , expirationSeconds : Optional Natural
                                      , path : Text
                                      }
                                }
                          }
                    , quobyte :
                        Optional
                          { group : Optional Text
                          , readOnly : Optional Bool
                          , registry : Text
                          , tenant : Optional Text
                          , user : Optional Text
                          , volume : Text
                          }
                    , rbd :
                        Optional
                          { fsType : Optional Text
                          , image : Text
                          , keyring : Optional Text
                          , monitors : List Text
                          , pool : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , user : Optional Text
                          }
                    , scaleIO :
                        Optional
                          { fsType : Optional Text
                          , gateway : Text
                          , protectionDomain : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : { name : Optional Text }
                          , sslEnabled : Optional Bool
                          , storageMode : Optional Text
                          , storagePool : Optional Text
                          , system : Text
                          , volumeName : Optional Text
                          }
                    , secret :
                        Optional
                          { defaultMode : Optional Natural
                          , items :
                              Optional
                                ( List
                                    { key : Text
                                    , mode : Optional Natural
                                    , path : Text
                                    }
                                )
                          , optional : Optional Bool
                          , secretName : Optional Text
                          }
                    , storageos :
                        Optional
                          { fsType : Optional Text
                          , readOnly : Optional Bool
                          , secretRef : Optional { name : Optional Text }
                          , volumeName : Optional Text
                          , volumeNamespace : Optional Text
                          }
                    , vsphereVolume :
                        Optional
                          { fsType : Optional Text
                          , storagePolicyID : Optional Text
                          , storagePolicyName : Optional Text
                          , volumePath : Text
                          }
                    }
                )
          }
        }
      }
    , status =
        None
          { availableReplicas : Optional Natural
          , collisionCount : Optional Natural
          , conditions :
              Optional
                ( List
                    { lastTransitionTime : Optional Text
                    , lastUpdateTime : Optional Text
                    , message : Optional Text
                    , reason : Optional Text
                    , status : Text
                    , type : Text
                    }
                )
          , observedGeneration : Optional Natural
          , readyReplicas : Optional Natural
          , replicas : Optional Natural
          , unavailableReplicas : Optional Natural
          , updatedReplicas : Optional Natural
          }
    }
  , Service.syntect-server
    =
    { apiVersion = "v1"
    , kind = "Service"
    , metadata =
      { annotations = None (List { mapKey : Text, mapValue : Text })
      , clusterName = None Text
      , creationTimestamp = None Text
      , deletionGracePeriodSeconds = None Natural
      , deletionTimestamp = None Text
      , finalizers = None (List Text)
      , generateName = None Text
      , generation = None Natural
      , labels = Some
          ( toMap
              { sourcegraph-resource-requires = "no-cluster-admin"
              , app = "syntect-server"
              , `app.kubernetes.io/component` = "syntect-server"
              , deploy = "sourcegraph"
              }
          )
      , managedFields =
          None
            ( List
                { apiVersion : Text
                , fieldsType : Optional Text
                , fieldsV1 : Optional (List { mapKey : Text, mapValue : Text })
                , manager : Optional Text
                , operation : Optional Text
                , time : Optional Text
                }
            )
      , name = Some "syntect-server"
      , namespace = None Text
      , ownerReferences =
          None
            ( List
                { apiVersion : Text
                , blockOwnerDeletion : Optional Bool
                , controller : Optional Bool
                , kind : Text
                , name : Text
                , uid : Text
                }
            )
      , resourceVersion = None Text
      , selfLink = None Text
      , uid = None Text
      }
    , spec = Some
      { clusterIP = None Text
      , externalIPs = None (List Text)
      , externalName = None Text
      , externalTrafficPolicy = None Text
      , healthCheckNodePort = None Natural
      , ipFamily = None Text
      , loadBalancerIP = None Text
      , loadBalancerSourceRanges = None (List Text)
      , ports = Some
        [ { appProtocol = None Text
          , name = Some "http"
          , nodePort = None Natural
          , port = 9238
          , protocol = None Text
          , targetPort = Some (< Int : Natural | String : Text >.String "http")
          }
        ]
      , publishNotReadyAddresses = None Bool
      , selector = Some (toMap { app = "syntect-server" })
      , sessionAffinity = None Text
      , sessionAffinityConfig =
          None { clientIP : Optional { timeoutSeconds : Optional Natural } }
      , topologyKeys = None (List Text)
      , type = Some "ClusterIP"
      }
    , status =
        None
          { loadBalancer :
              Optional
                { ingress :
                    Optional
                      (List { hostname : Optional Text, ip : Optional Text })
                }
          }
    }
  }
}
